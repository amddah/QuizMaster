<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/quizmaster/ui/quiz/QuizCreationActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/quizmaster/ui/quiz/QuizCreationActivity.kt" />
              <option name="originalContent" value="package com.example.quizmaster.ui.quiz&#10;&#10;import android.os.Bundle&#10;import android.widget.*&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.view.WindowManager&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.quizmaster.R&#10;import com.example.quizmaster.data.local.UserSessionManager&#10;import com.example.quizmaster.data.model.QuizModel&#10;import com.example.quizmaster.data.model.QuestionModel&#10;import com.example.quizmaster.data.model.QuestionType&#10;import com.example.quizmaster.data.model.ApprovalStatus&#10;import com.example.quizmaster.data.model.UserRole&#10;import com.example.quizmaster.data.remote.ApiClient&#10;import com.example.quizmaster.data.remote.QuizApiService&#10;import com.example.quizmaster.data.QuizCategory&#10;import com.example.quizmaster.data.QuizDifficulty&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.flow.first&#10;&#10;/**&#10; * Quiz Creation Activity - Allows students and professors to create quizzes&#10; */&#10;class QuizCreationActivity : AppCompatActivity() {&#10;    &#10;    private lateinit var quizTitleInput: EditText&#10;    private lateinit var quizDescriptionInput: EditText&#10;    private lateinit var categorySpinner: Spinner&#10;    private lateinit var difficultySpinner: Spinner&#10;    private lateinit var courseSpinner: Spinner&#10;    private lateinit var questionsRecyclerView: RecyclerView&#10;    private lateinit var addQuestionButton: Button&#10;    private lateinit var submitButton: Button&#10;    private lateinit var actionButtonsContainer: LinearLayout&#10;    private lateinit var progressBar: ProgressBar&#10;&#10;    private lateinit var sessionManager: UserSessionManager&#10;    private lateinit var quizApiService: QuizApiService&#10;    &#10;    private val questions = mutableListOf&lt;QuestionModel&gt;()&#10;    private lateinit var questionAdapter: QuestionAdapter&#10;    &#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_quiz_creation)&#10;&#10;        sessionManager = UserSessionManager.getInstance(this)&#10;        quizApiService = ApiClient.quizApiService&#10;        &#10;        // Force EditText colors across this activity to avoid invisible text due to theme overrides&#10;        forceEditTextColors(findViewById&lt;View&gt;(android.R.id.content))&#10;&#10;        initViews()&#10;        setupSpinners()&#10;        setupRecyclerView()&#10;        setupClickListeners()&#10;    }&#10;&#10;    // Recursively force EditText text color to black and hint color to text_secondary&#10;    private fun forceEditTextColors(root: View) {&#10;        when (root) {&#10;            is ViewGroup -&gt; {&#10;                for (i in 0 until root.childCount) {&#10;                    forceEditTextColors(root.getChildAt(i))&#10;                }&#10;            }&#10;            is EditText -&gt; {&#10;                try {&#10;                    root.setTextColor(android.graphics.Color.BLACK)&#10;                    root.setHintTextColor(resources.getColor(R.color.text_secondary, theme))&#10;                } catch (_: Exception) { /* defensive: ignore if color not found */ }&#10;            }&#10;            else -&gt; { /* noop */ }&#10;        }&#10;    }&#10;&#10;    private fun initViews() {&#10;        quizTitleInput = findViewById(R.id.quizTitleInput)&#10;        quizDescriptionInput = findViewById(R.id.quizDescriptionInput)&#10;        categorySpinner = findViewById(R.id.categorySpinner)&#10;        difficultySpinner = findViewById(R.id.difficultySpinner)&#10;        courseSpinner = findViewById(R.id.courseSpinner)&#10;        questionsRecyclerView = findViewById(R.id.questionsRecyclerView)&#10;        addQuestionButton = findViewById(R.id.addQuestionButton)&#10;        submitButton = findViewById(R.id.submitButton)&#10;        actionButtonsContainer = findViewById(R.id.actionButtonsContainer)&#10;        progressBar = findViewById(R.id.progressBar)&#10;&#10;        // Ensure input text is visible regardless of theme overrides&#10;        quizTitleInput.setTextColor(android.graphics.Color.BLACK)&#10;        quizDescriptionInput.setTextColor(android.graphics.Color.BLACK)&#10;    }&#10;    &#10;    private fun setupSpinners() {&#10;        // Category Spinner&#10;        val categories = QuizCategory.entries.map { it.displayName }&#10;        // Use custom spinner_item layout for the selected view (ensures padding + ellipsize)&#10;        val categoryAdapter = object : ArrayAdapter&lt;String&gt;(this, R.layout.spinner_selected_item, categories) {&#10;            override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;            override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;        }&#10;        categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;        categorySpinner.adapter = categoryAdapter&#10;        // Ensure selected view text is visible&#10;        ensureSpinnerSelectedTextBlack(categorySpinner)&#10;        // Force white popup background and refresh selection so selected view is rendered with our custom layout&#10;        categorySpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;        categorySpinner.setSelection(categorySpinner.selectedItemPosition)&#10;&#10;        // Difficulty Spinner&#10;        val difficulties = QuizDifficulty.entries.map { it.displayName }&#10;        val difficultyAdapter = object : ArrayAdapter&lt;String&gt;(this, R.layout.spinner_selected_item, difficulties) {&#10;            override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;            override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;        }&#10;        difficultyAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;        difficultySpinner.adapter = difficultyAdapter&#10;        ensureSpinnerSelectedTextBlack(difficultySpinner)&#10;        difficultySpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;        difficultySpinner.setSelection(difficultySpinner.selectedItemPosition)&#10;&#10;        // Course Spinner with proper text visibility&#10;        val courses = listOf(&#10;            &quot;PROG101 - Programming 101&quot;,&#10;            &quot;DS201 - Data Structures&quot;,&#10;            &quot;ALG301 - Algorithms&quot;,&#10;            &quot;DB401 - Database Systems&quot;,&#10;            &quot;WEB101 - Web Development&quot;,&#10;            &quot;MOB201 - Mobile Development&quot;,&#10;            &quot;SE301 - Software Engineering&quot;,&#10;            &quot;NET401 - Computer Networks&quot;&#10;        )&#10;        val courseAdapter = object : ArrayAdapter&lt;String&gt;(this, R.layout.spinner_selected_item, courses) {&#10;            override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;            override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;        }&#10;        courseAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;        courseSpinner.adapter = courseAdapter&#10;        ensureSpinnerSelectedTextBlack(courseSpinner)&#10;        courseSpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;        courseSpinner.setSelection(courseSpinner.selectedItemPosition)&#10;    }&#10;&#10;    // Force the selected (closed) Spinner text color to black. Use when adapter.getView may not affect the rendered selected view.&#10;    private fun ensureSpinnerSelectedTextBlack(spinner: Spinner) {&#10;        // preserve any existing listener by wrapping? For simplicity, set a light listener that only ensures color; it won't override more complex listeners used ailleurs.&#10;        spinner.post {&#10;            (spinner.selectedView as? TextView)?.setTextColor(android.graphics.Color.BLACK)&#10;        }&#10;        spinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {&#10;            override fun onItemSelected(parent: AdapterView&lt;*&gt;?, view: View?, position: Int, id: Long) {&#10;                (spinner.selectedView as? TextView)?.setTextColor(android.graphics.Color.BLACK)&#10;            }&#10;            override fun onNothingSelected(parent: AdapterView&lt;*&gt;?) {}&#10;        }&#10;    }&#10;    &#10;    private fun setupRecyclerView() {&#10;        // Pass a mutable list and provide both delete and edit handlers&#10;        questionAdapter = QuestionAdapter(questions as MutableList&lt;QuestionModel&gt;, onDelete = { position -&gt;&#10;            if (position in questions.indices) {&#10;                questions.removeAt(position)&#10;                questionAdapter.notifyItemRemoved(position)&#10;                // refresh following items so any index-related info is updated&#10;                if (position &lt; questions.size) questionAdapter.notifyItemRangeChanged(position, questions.size - position)&#10;            }&#10;        }, onEdit = { position -&gt;&#10;            if (position in questions.indices) showEditQuestionDialog(position)&#10;        })&#10;        questionsRecyclerView.layoutManager = LinearLayoutManager(this)&#10;        questionsRecyclerView.adapter = questionAdapter&#10;    }&#10;    &#10;    private fun setupClickListeners() {&#10;        addQuestionButton.setOnClickListener {&#10;            showAddQuestionDialog()&#10;        }&#10;        &#10;        submitButton.setOnClickListener {&#10;            saveQuiz()&#10;        }&#10;    }&#10;    &#10;    @Suppress(&quot;DEPRECATION&quot;)&#10;    private fun showAddQuestionDialog() {&#10;        val builder = android.app.AlertDialog.Builder(this)&#10;        val view = layoutInflater.inflate(R.layout.dialog_add_question, null)&#10;&#10;        val questionTextInput = view.findViewById&lt;EditText&gt;(R.id.questionTextInput)&#10;        // Force text color on dialog input to avoid theme tint making text invisible&#10;        questionTextInput.setTextColor(android.graphics.Color.BLACK)&#10;        questionTextInput.setHintTextColor(getColor(R.color.text_secondary))&#10;         val questionTypeSpinner = view.findViewById&lt;Spinner&gt;(R.id.questionTypeSpinner)&#10;         val optionsContainer = view.findViewById&lt;LinearLayout&gt;(R.id.optionsContainer)&#10;         val correctAnswerSpinner = view.findViewById&lt;Spinner&gt;(R.id.correctAnswerSpinner)&#10;         val dialogCancelButton = view.findViewById&lt;Button&gt;(R.id.cancelButton)&#10;         val dialogAddButton = view.findViewById&lt;Button&gt;(R.id.addButton)&#10;&#10;        val typeAdapter = object : ArrayAdapter&lt;String&gt;(this, R.layout.spinner_selected_item, listOf(&quot;True/False&quot;, &quot;Multiple Choice&quot;)) {&#10;            override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;            override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;        }&#10;        typeAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;        questionTypeSpinner.adapter = typeAdapter&#10;        ensureSpinnerSelectedTextBlack(questionTypeSpinner)&#10;        questionTypeSpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;        questionTypeSpinner.setSelection(questionTypeSpinner.selectedItemPosition)&#10;&#10;        val optionInputs = mutableListOf&lt;EditText&gt;()&#10;        &#10;        questionTypeSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {&#10;            override fun onItemSelected(parent: AdapterView&lt;*&gt;?, view: View?, position: Int, id: Long) {&#10;                // Ensure selected text stays black when user picks a type&#10;                (questionTypeSpinner.selectedView as? TextView)?.setTextColor(android.graphics.Color.BLACK)&#10;                 optionsContainer.removeAllViews()&#10;                 optionInputs.clear()&#10;&#10;                if (position == 1) { // Multiple Choice&#10;                    repeat(4) { i -&gt;&#10;                        val optionInput = EditText(this@QuizCreationActivity).apply {&#10;                            hint = &quot;Option ${i + 1}&quot;&#10;                            textSize = 16f&#10;                            setPadding(16, 16, 16, 16)&#10;                            // Force black text so it's visible on white popup background&#10;                            setTextColor(android.graphics.Color.BLACK)&#10;                            // Keep hint color as secondary gray&#10;                            setHintTextColor(getColor(R.color.text_secondary))&#10;                            layoutParams = LinearLayout.LayoutParams(&#10;                                LinearLayout.LayoutParams.MATCH_PARENT,&#10;                                LinearLayout.LayoutParams.WRAP_CONTENT&#10;                            ).apply { setMargins(0, 8, 0, 8) }&#10;                        }&#10;                        // Appliquer un fond arrondi blanc uniforme&#10;                        optionInput.setBackgroundResource(R.drawable.input_rounded_background)&#10;                        optionsContainer.addView(optionInput)&#10;                        optionInputs.add(optionInput)&#10;                    }&#10;&#10;                    // Update correct answer spinner for multiple choice&#10;                    val answerOptions = listOf(&quot;Option 1&quot;, &quot;Option 2&quot;, &quot;Option 3&quot;, &quot;Option 4&quot;)&#10;                    val answerAdapter = object : ArrayAdapter&lt;String&gt;(this@QuizCreationActivity, R.layout.spinner_selected_item, answerOptions) {&#10;                        override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                            val view = super.getView(position, convertView, parent) as TextView&#10;                            view.setTextColor(android.graphics.Color.BLACK)&#10;                            view.setPadding(24, 16, 24, 16)&#10;                            return view&#10;                        }&#10;                        override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                            val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                            view.setTextColor(android.graphics.Color.BLACK)&#10;                            view.setPadding(24, 16, 24, 16)&#10;                            return view&#10;                        }&#10;                    }&#10;                    answerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;                    correctAnswerSpinner.adapter = answerAdapter&#10;                    ensureSpinnerSelectedTextBlack(correctAnswerSpinner)&#10;                    correctAnswerSpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;                    correctAnswerSpinner.setSelection(correctAnswerSpinner.selectedItemPosition)&#10;                 } else { // True/False&#10;                    val answerOptions = listOf(&quot;True&quot;, &quot;False&quot;)&#10;                    val answerAdapter = object : ArrayAdapter&lt;String&gt;(this@QuizCreationActivity, R.layout.spinner_selected_item, answerOptions) {&#10;                        override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                            val view = super.getView(position, convertView, parent) as TextView&#10;                            view.setTextColor(android.graphics.Color.BLACK)&#10;                            view.setPadding(24, 16, 24, 16)&#10;                            return view&#10;                        }&#10;                        override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                            val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                            view.setTextColor(android.graphics.Color.BLACK)&#10;                            view.setPadding(24, 16, 24, 16)&#10;                            return view&#10;                        }&#10;                    }&#10;                    answerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;                    correctAnswerSpinner.adapter = answerAdapter&#10;                    ensureSpinnerSelectedTextBlack(correctAnswerSpinner)&#10;                    correctAnswerSpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;                    correctAnswerSpinner.setSelection(correctAnswerSpinner.selectedItemPosition)&#10;                 }&#10;&#10;                 correctAnswerSpinner.isEnabled = true&#10;             }&#10;             override fun onNothingSelected(parent: AdapterView&lt;*&gt;?) {}&#10;         }&#10;&#10;        // Initialize with True/False options&#10;        val initAnswerOptions = listOf(&quot;True&quot;, &quot;False&quot;)&#10;        val initAnswerAdapter = object : ArrayAdapter&lt;String&gt;(this, R.layout.spinner_selected_item, initAnswerOptions) {&#10;            override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;            override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;        }&#10;        initAnswerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;        correctAnswerSpinner.adapter = initAnswerAdapter&#10;        ensureSpinnerSelectedTextBlack(correctAnswerSpinner)&#10;        correctAnswerSpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;        correctAnswerSpinner.setSelection(correctAnswerSpinner.selectedItemPosition)&#10;        correctAnswerSpinner.isEnabled = true&#10;        &#10;        // Hide underlying action buttons so they don't appear duplicated under the dialog&#10;        actionButtonsContainer.visibility = View.GONE&#10;        addQuestionButton.visibility = View.GONE&#10;&#10;         builder.setView(view)&#10;         val alert = builder.create()&#10;        // Ensure dialog resizes when keyboard appears so inputs are not obscured&#10;        alert.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)&#10;&#10;         alert.setOnDismissListener {&#10;             // restore underlying buttons visibility&#10;             actionButtonsContainer.visibility = View.VISIBLE&#10;             addQuestionButton.visibility = View.VISIBLE&#10;         }&#10;         alert.show()&#10;&#10;        // After the dialog is shown ensure the selected view text color is set (view may not be attached before show)&#10;        questionTypeSpinner.post { (questionTypeSpinner.selectedView as? TextView)?.setTextColor(android.graphics.Color.BLACK) }&#10;        correctAnswerSpinner.post { (correctAnswerSpinner.selectedView as? TextView)?.setTextColor(android.graphics.Color.BLACK) }&#10;&#10;        // Hook dialog internal buttons&#10;        dialogCancelButton.setOnClickListener {&#10;            alert.dismiss()&#10;        }&#10;&#10;        dialogAddButton.setOnClickListener {&#10;            val questionText = questionTextInput.text.toString()&#10;            if (questionText.isNotEmpty()) {&#10;                val type = if (questionTypeSpinner.selectedItemPosition == 0)&#10;                    QuestionType.TRUE_FALSE else QuestionType.MULTIPLE_CHOICE&#10;                &#10;                val options: List&lt;String&gt;&#10;                val correctAnswerIndex: String&#10;                &#10;                if (type == QuestionType.MULTIPLE_CHOICE) {&#10;                    options = optionInputs.map { it.text.toString() }.filter { it.isNotEmpty() }&#10;                    if (options.isEmpty()) {&#10;                        Toast.makeText(this, &quot;Please provide at least one option&quot;, Toast.LENGTH_SHORT).show()&#10;                        return@setOnClickListener&#10;                    }&#10;                    correctAnswerIndex = correctAnswerSpinner.selectedItemPosition.toString()&#10;                } else {&#10;                    options = listOf(&quot;True&quot;, &quot;False&quot;)&#10;                    correctAnswerIndex = if (correctAnswerSpinner.selectedItemPosition == 0) &quot;true&quot; else &quot;false&quot;&#10;                }&#10;                &#10;                val question = QuestionModel(&#10;                    id = System.currentTimeMillis().toString(),&#10;                    questionText = questionText,&#10;                    type = type,&#10;                    correctAnswer = correctAnswerIndex,&#10;                    options = options,&#10;                    timeLimit = 60,&#10;                    maxScore = 10&#10;                )&#10;                &#10;                questions.add(question)&#10;                questionAdapter.notifyItemInserted(questions.size - 1)&#10;                alert.dismiss()&#10;            } else {&#10;                Toast.makeText(this, &quot;Please enter question text&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Dialog to edit an existing question in-place&#10;    @Suppress(&quot;DEPRECATION&quot;)&#10;    private fun showEditQuestionDialog(position: Int) {&#10;        val existing = questions[position]&#10;        val builder = android.app.AlertDialog.Builder(this)&#10;        val view = layoutInflater.inflate(R.layout.dialog_add_question, null)&#10;&#10;        val questionTextInput = view.findViewById&lt;EditText&gt;(R.id.questionTextInput)&#10;        questionTextInput.setTextColor(android.graphics.Color.BLACK)&#10;        questionTextInput.setHintTextColor(getColor(R.color.text_secondary))&#10;        val questionTypeSpinner = view.findViewById&lt;Spinner&gt;(R.id.questionTypeSpinner)&#10;        val optionsContainer = view.findViewById&lt;LinearLayout&gt;(R.id.optionsContainer)&#10;        val correctAnswerSpinner = view.findViewById&lt;Spinner&gt;(R.id.correctAnswerSpinner)&#10;        val dialogCancelButton = view.findViewById&lt;Button&gt;(R.id.cancelButton)&#10;        val dialogAddButton = view.findViewById&lt;Button&gt;(R.id.addButton)&#10;&#10;        // Setup type spinner (same as add dialog)&#10;        val typeAdapter = object : ArrayAdapter&lt;String&gt;(this, R.layout.spinner_selected_item, listOf(&quot;True/False&quot;, &quot;Multiple Choice&quot;)) {&#10;            override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;            override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;        }&#10;        typeAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;        questionTypeSpinner.adapter = typeAdapter&#10;        ensureSpinnerSelectedTextBlack(questionTypeSpinner)&#10;        questionTypeSpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;&#10;        val optionInputs = mutableListOf&lt;EditText&gt;()&#10;&#10;        // Helper to build answer spinner for multiple choice&#10;        fun setupAnswerSpinnerForOptions(optionCount: Int) {&#10;            val answerOptions = (1..optionCount).map { &quot;Option $it&quot; }&#10;            val answerAdapter = object : ArrayAdapter&lt;String&gt;(this@QuizCreationActivity, R.layout.spinner_selected_item, answerOptions) {&#10;                override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                    val view = super.getView(position, convertView, parent) as TextView&#10;                    view.setTextColor(android.graphics.Color.BLACK)&#10;                    view.setPadding(24, 16, 24, 16)&#10;                    return view&#10;                }&#10;                override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                    val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                    view.setTextColor(android.graphics.Color.BLACK)&#10;                    view.setPadding(24, 16, 24, 16)&#10;                    return view&#10;                }&#10;            }&#10;            answerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;            correctAnswerSpinner.adapter = answerAdapter&#10;            ensureSpinnerSelectedTextBlack(correctAnswerSpinner)&#10;            correctAnswerSpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;        }&#10;&#10;        questionTypeSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {&#10;            override fun onItemSelected(parent: AdapterView&lt;*&gt;?, view: View?, pos: Int, id: Long) {&#10;                (questionTypeSpinner.selectedView as? TextView)?.setTextColor(android.graphics.Color.BLACK)&#10;                optionsContainer.removeAllViews()&#10;                optionInputs.clear()&#10;&#10;                if (pos == 1) { // Multiple Choice&#10;                    // Create four option inputs (or reuse count from existing question)&#10;                    val initialOptions = if (existing.options.isNotEmpty()) existing.options else List(4) { &quot;&quot; }&#10;                    val count = maxOf(4, initialOptions.size)&#10;                    repeat(count) { i -&gt;&#10;                        val optionInput = EditText(this@QuizCreationActivity).apply {&#10;                            hint = &quot;Option ${i + 1}&quot;&#10;                            textSize = 16f&#10;                            setPadding(16, 16, 16, 16)&#10;                            setTextColor(android.graphics.Color.BLACK)&#10;                            setHintTextColor(getColor(R.color.text_secondary))&#10;                            layoutParams = LinearLayout.LayoutParams(&#10;                                LinearLayout.LayoutParams.MATCH_PARENT,&#10;                                LinearLayout.LayoutParams.WRAP_CONTENT&#10;                            ).apply { setMargins(0, 8, 0, 8) }&#10;                        }&#10;                        optionInput.setBackgroundResource(R.drawable.input_rounded_background)&#10;                        optionInput.setText(if (i &lt; initialOptions.size) initialOptions[i] else &quot;&quot;)&#10;                        optionsContainer.addView(optionInput)&#10;                        optionInputs.add(optionInput)&#10;                    }&#10;                    setupAnswerSpinnerForOptions(optionInputs.size)&#10;                } else { // True/False&#10;                    val answerOptions = listOf(&quot;True&quot;, &quot;False&quot;)&#10;                    val answerAdapter = object : ArrayAdapter&lt;String&gt;(this@QuizCreationActivity, R.layout.spinner_selected_item, answerOptions) {&#10;                        override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                            val view = super.getView(position, convertView, parent) as TextView&#10;                            view.setTextColor(android.graphics.Color.BLACK)&#10;                            view.setPadding(24, 16, 24, 16)&#10;                            return view&#10;                        }&#10;                        override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                            val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                            view.setTextColor(android.graphics.Color.BLACK)&#10;                            view.setPadding(24, 16, 24, 16)&#10;                            return view&#10;                        }&#10;                    }&#10;                    answerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;                    correctAnswerSpinner.adapter = answerAdapter&#10;                    ensureSpinnerSelectedTextBlack(correctAnswerSpinner)&#10;                    correctAnswerSpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;                }&#10;&#10;                correctAnswerSpinner.isEnabled = true&#10;            }&#10;            override fun onNothingSelected(parent: AdapterView&lt;*&gt;?) {}&#10;        }&#10;&#10;        // Prefill current values&#10;        questionTextInput.setText(existing.questionText)&#10;        questionTypeSpinner.post { questionTypeSpinner.setSelection(if (existing.type == QuestionType.MULTIPLE_CHOICE) 1 else 0) }&#10;&#10;        // Force initialization of answer spinner by triggering selection handler&#10;        questionTypeSpinner.post {&#10;            // After type spinner sets up options, preselect correct answer&#10;            if (existing.type == QuestionType.MULTIPLE_CHOICE) {&#10;                // find correct index if stored as numeric string&#10;                val correctIdx = existing.correctAnswer.toIntOrNull() ?: 0&#10;                correctAnswerSpinner.post { if (correctIdx in 0 until correctAnswerSpinner.count) correctAnswerSpinner.setSelection(correctIdx) }&#10;            } else {&#10;                val sel = if (existing.correctAnswer.equals(&quot;true&quot;, ignoreCase = true)) 0 else 1&#10;                correctAnswerSpinner.post { correctAnswerSpinner.setSelection(sel) }&#10;            }&#10;        }&#10;&#10;        // Hide underlying action buttons so they don't appear duplicated under the dialog&#10;        actionButtonsContainer.visibility = View.GONE&#10;        addQuestionButton.visibility = View.GONE&#10;&#10;        builder.setView(view)&#10;        val alert = builder.create()&#10;        alert.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)&#10;&#10;        alert.setOnDismissListener {&#10;            actionButtonsContainer.visibility = View.VISIBLE&#10;            addQuestionButton.visibility = View.VISIBLE&#10;        }&#10;&#10;        alert.show()&#10;&#10;        // Ensure text colors for spinners inside dialog&#10;        questionTypeSpinner.post { (questionTypeSpinner.selectedView as? TextView)?.setTextColor(android.graphics.Color.BLACK) }&#10;        correctAnswerSpinner.post { (correctAnswerSpinner.selectedView as? TextView)?.setTextColor(android.graphics.Color.BLACK) }&#10;&#10;        dialogCancelButton.setOnClickListener { alert.dismiss() }&#10;&#10;        // Update button text to indicate edit&#10;        dialogAddButton.text = getString(R.string.update)&#10;        dialogAddButton.setOnClickListener {&#10;            val questionText = questionTextInput.text.toString()&#10;            if (questionText.isNotEmpty()) {&#10;                val type = if (questionTypeSpinner.selectedItemPosition == 0) QuestionType.TRUE_FALSE else QuestionType.MULTIPLE_CHOICE&#10;&#10;                val options: List&lt;String&gt;&#10;                val correctAnswerIndex: String&#10;&#10;                if (type == QuestionType.MULTIPLE_CHOICE) {&#10;                    val collected = optionInputs.map { it.text.toString() }.filter { it.isNotEmpty() }&#10;                    if (collected.isEmpty()) {&#10;                        Toast.makeText(this, &quot;Please provide at least one option&quot;, Toast.LENGTH_SHORT).show()&#10;                        return@setOnClickListener&#10;                    }&#10;                    options = collected&#10;                    correctAnswerIndex = correctAnswerSpinner.selectedItemPosition.toString()&#10;                } else {&#10;                    options = listOf(&quot;True&quot;, &quot;False&quot;)&#10;                    correctAnswerIndex = if (correctAnswerSpinner.selectedItemPosition == 0) &quot;true&quot; else &quot;false&quot;&#10;                }&#10;&#10;                val updated = existing.copy(&#10;                    questionText = questionText,&#10;                    type = type,&#10;                    correctAnswer = correctAnswerIndex,&#10;                    options = options&#10;                )&#10;&#10;                questions[position] = updated&#10;                questionAdapter.notifyItemChanged(position)&#10;                alert.dismiss()&#10;            } else {&#10;                Toast.makeText(this, &quot;Please enter question text&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveQuiz() {&#10;        val title = quizTitleInput.text.toString()&#10;        val description = quizDescriptionInput.text.toString()&#10;        val courseSelection = courseSpinner.selectedItem?.toString() ?: &quot;&quot;&#10;&#10;        if (title.isEmpty() || questions.isEmpty() || courseSelection.isEmpty()) {&#10;            Toast.makeText(this, &quot;Please fill all fields and add at least one question&quot;, Toast.LENGTH_SHORT).show()&#10;            return&#10;        }&#10;        &#10;        // Extract course ID from the selection (format: &quot;PROG101 - Programming 101&quot;)&#10;        val courseId = courseSelection.split(&quot; - &quot;).firstOrNull()?.trim() ?: &quot;UNKNOWN&quot;&#10;        val courseName = courseSelection.split(&quot; - &quot;).lastOrNull()?.trim() ?: courseSelection&#10;        &#10;        progressBar.visibility = ProgressBar.VISIBLE&#10;&#10;        lifecycleScope.launch {&#10;            try {&#10;                val category = QuizCategory.entries[categorySpinner.selectedItemPosition]&#10;                val difficulty = QuizDifficulty.entries[difficultySpinner.selectedItemPosition]&#10;&#10;                // Get current user from Flow (suspend) - first emission&#10;                val currentUser = sessionManager.currentUser.first()&#10;&#10;                val status = if (currentUser?.role == UserRole.PROFESSOR)&#10;                    ApprovalStatus.APPROVED else ApprovalStatus.PENDING&#10;                &#10;                // Prepare questions with proper order&#10;                val orderedQuestions = questions.mapIndexed { index, question -&gt;&#10;                    QuestionModel(&#10;                        id = question.id,&#10;                        questionText = question.questionText,&#10;                        type = question.type,&#10;                        correctAnswer = question.correctAnswer,&#10;                        options = question.options,&#10;                        timeLimit = question.timeLimit,&#10;                        maxScore = question.maxScore,&#10;                        order = index + 1,&#10;                        explanation = question.explanation&#10;                    )&#10;                }&#10;                &#10;                val quiz = QuizModel(&#10;                    id = System.currentTimeMillis().toString(),&#10;                    title = title,&#10;                    description = description,&#10;                    category = category,&#10;                    difficulty = difficulty,&#10;                    questions = orderedQuestions,&#10;                    creatorId = currentUser?.id ?: &quot;&quot;,&#10;                    creatorName = &quot;${currentUser?.firstName} ${currentUser?.lastName}&quot;,&#10;                    creatorRole = currentUser?.role ?: UserRole.STUDENT,&#10;                    linkedCourseId = courseId,&#10;                    linkedCourseName = courseName,&#10;                    approvalStatus = status&#10;                )&#10;                &#10;                val response = quizApiService.createQuiz(quiz)&#10;&#10;                progressBar.visibility = ProgressBar.GONE&#10;                &#10;                if (response.isSuccessful) {&#10;                    Toast.makeText(&#10;                        this@QuizCreationActivity,&#10;                        &quot;Quiz created successfully!&quot;,&#10;                        Toast.LENGTH_SHORT&#10;                    ).show()&#10;                    finish()&#10;                } else {&#10;                    Toast.makeText(&#10;                        this@QuizCreationActivity,&#10;                        &quot;Failed to create quiz: ${response.message()}&quot;,&#10;                        Toast.LENGTH_SHORT&#10;                    ).show()&#10;                }&#10;            } catch (e: Exception) {&#10;                progressBar.visibility = ProgressBar.GONE&#10;                Toast.makeText(this@QuizCreationActivity, &quot;Error: ${e.message}&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;}&#10;&#10;/**&#10; * Adapter for displaying questions in RecyclerView&#10; */&#10;class QuestionAdapter(&#10;    private val questions: MutableList&lt;QuestionModel&gt;,&#10;    private val onDelete: (Int) -&gt; Unit,&#10;    private val onEdit: (Int) -&gt; Unit&#10;) : RecyclerView.Adapter&lt;QuestionAdapter.ViewHolder&gt;() {&#10;&#10;    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val questionText: TextView = itemView.findViewById(R.id.questionText)&#10;        private val questionType: TextView = itemView.findViewById(R.id.questionType)&#10;        private val deleteButton: androidx.appcompat.widget.AppCompatImageButton = itemView.findViewById(R.id.deleteButton)&#10;&#10;        fun bind(question: QuestionModel) {&#10;            questionText.text = question.questionText&#10;            // Show type + extras (options count and points) to give more info in the item UI&#10;            questionType.text = &quot;${question.type.name} • ${question.options.size} options • ${question.maxScore} pts&quot;&#10;&#10;            // Accessibility: describe the delete action&#10;            deleteButton.contentDescription = itemView.context.getString(R.string.delete_question)&#10;&#10;            deleteButton.setOnClickListener {&#10;                val pos = bindingAdapterPosition&#10;                if (pos == RecyclerView.NO_POSITION) return@setOnClickListener&#10;&#10;                // Prevent double-clicks&#10;                deleteButton.isEnabled = false&#10;&#10;                // Confirmation dialog before deletion&#10;                android.app.AlertDialog.Builder(itemView.context)&#10;                    .setTitle(itemView.context.getString(R.string.confirm_delete_title))&#10;                    .setMessage(itemView.context.getString(R.string.confirm_delete_message))&#10;                    .setPositiveButton(itemView.context.getString(R.string.delete)) { _, _ -&gt;&#10;                        onDelete(pos)&#10;                    }&#10;                    .setNegativeButton(itemView.context.getString(R.string.cancel)) { dialog, _ -&gt;&#10;                        dialog.dismiss()&#10;                    }&#10;                    .setOnDismissListener {&#10;                        // Re-enable after dialog closes&#10;                        deleteButton.isEnabled = true&#10;                    }&#10;                    .show()&#10;            }&#10;&#10;            itemView.setOnClickListener {&#10;                val pos = bindingAdapterPosition&#10;                if (pos != RecyclerView.NO_POSITION) onEdit(pos)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = android.view.LayoutInflater.from(parent.context).inflate(R.layout.item_question, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        holder.bind(questions[position])&#10;    }&#10;&#10;    override fun getItemCount() = questions.size&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.quizmaster.ui.quiz&#10;&#10;import android.os.Bundle&#10;import android.widget.*&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.view.WindowManager&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.quizmaster.R&#10;import com.example.quizmaster.data.local.UserSessionManager&#10;import com.example.quizmaster.data.model.QuizModel&#10;import com.example.quizmaster.data.model.QuestionModel&#10;import com.example.quizmaster.data.model.QuestionType&#10;import com.example.quizmaster.data.model.ApprovalStatus&#10;import com.example.quizmaster.data.model.UserRole&#10;import com.example.quizmaster.data.remote.ApiClient&#10;import com.example.quizmaster.data.remote.QuizApiService&#10;import com.example.quizmaster.data.QuizCategory&#10;import com.example.quizmaster.data.QuizDifficulty&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.flow.first&#10;&#10;/**&#10; * Quiz Creation Activity - Allows students and professors to create quizzes&#10; */&#10;class QuizCreationActivity : AppCompatActivity() {&#10;    &#10;    private lateinit var quizTitleInput: EditText&#10;    private lateinit var quizDescriptionInput: EditText&#10;    private lateinit var categorySpinner: Spinner&#10;    private lateinit var difficultySpinner: Spinner&#10;    private lateinit var courseSpinner: Spinner&#10;    private lateinit var questionsRecyclerView: RecyclerView&#10;    private lateinit var addQuestionButton: Button&#10;    private lateinit var submitButton: Button&#10;    private lateinit var actionButtonsContainer: LinearLayout&#10;    private lateinit var progressBar: ProgressBar&#10;&#10;    // Added references for cancel/back so they can be wired to actions&#10;    private lateinit var cancelButton: Button&#10;    private lateinit var backButton: ImageButton&#10;&#10;    private lateinit var sessionManager: UserSessionManager&#10;    private lateinit var quizApiService: QuizApiService&#10;    &#10;    private val questions = mutableListOf&lt;QuestionModel&gt;()&#10;    private lateinit var questionAdapter: QuestionAdapter&#10;    &#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_quiz_creation)&#10;        // Ensure the window resizes when the keyboard appears so bottom buttons stay visible&#10;        window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)&#10;&#10;        sessionManager = UserSessionManager.getInstance(this)&#10;        quizApiService = ApiClient.quizApiService&#10;        &#10;        // Force EditText colors across this activity to avoid invisible text due to theme overrides&#10;        forceEditTextColors(findViewById&lt;View&gt;(android.R.id.content))&#10;&#10;        initViews()&#10;        setupSpinners()&#10;        setupRecyclerView()&#10;        setupClickListeners()&#10;    }&#10;&#10;    // Recursively force EditText text color to black and hint color to text_secondary&#10;    private fun forceEditTextColors(root: View) {&#10;        when (root) {&#10;            is ViewGroup -&gt; {&#10;                for (i in 0 until root.childCount) {&#10;                    forceEditTextColors(root.getChildAt(i))&#10;                }&#10;            }&#10;            is EditText -&gt; {&#10;                try {&#10;                    root.setTextColor(android.graphics.Color.BLACK)&#10;                    root.setHintTextColor(resources.getColor(R.color.text_secondary, theme))&#10;                } catch (_: Exception) { /* defensive: ignore if color not found */ }&#10;            }&#10;            else -&gt; { /* noop */ }&#10;        }&#10;    }&#10;&#10;    private fun initViews() {&#10;        quizTitleInput = findViewById(R.id.quizTitleInput)&#10;        quizDescriptionInput = findViewById(R.id.quizDescriptionInput)&#10;        categorySpinner = findViewById(R.id.categorySpinner)&#10;        difficultySpinner = findViewById(R.id.difficultySpinner)&#10;        courseSpinner = findViewById(R.id.courseSpinner)&#10;        questionsRecyclerView = findViewById(R.id.questionsRecyclerView)&#10;        addQuestionButton = findViewById(R.id.addQuestionButton)&#10;        submitButton = findViewById(R.id.submitButton)&#10;        cancelButton = findViewById(R.id.cancelButton)&#10;        backButton = findViewById(R.id.backButton)&#10;        actionButtonsContainer = findViewById(R.id.actionButtonsContainer)&#10;        progressBar = findViewById(R.id.progressBar)&#10;&#10;        // Ensure input text is visible regardless of theme overrides&#10;        quizTitleInput.setTextColor(android.graphics.Color.BLACK)&#10;        quizDescriptionInput.setTextColor(android.graphics.Color.BLACK)&#10;&#10;        // Make buttons more friendly (no screaming uppercase)&#10;        try {&#10;            submitButton.isAllCaps = false&#10;            cancelButton.isAllCaps = false&#10;            addQuestionButton.isAllCaps = false&#10;        } catch (_: Exception) { }&#10;&#10;        // Shorter, friendlier label for submit to keep UI compact&#10;        try { submitButton.text = getString(R.string.submit_short) } catch (_: Exception) { }&#10;&#10;        // Defensive: ensure action buttons are visible and enabled (fix for themes/layout states hiding them)&#10;        actionButtonsContainer.visibility = View.VISIBLE&#10;        submitButton.visibility = View.VISIBLE&#10;        submitButton.isEnabled = true&#10;        // Ensure submit button uses the expected drawable and text color at runtime&#10;        try {&#10;            submitButton.setBackgroundResource(R.drawable.button_primary)&#10;            // Remove any background tint applied by theme/components which can make text/background invisible&#10;            try { submitButton.backgroundTintList = null } catch (_: Exception) { }&#10;            submitButton.setTextColor(android.graphics.Color.WHITE)&#10;            val pad = (12 * resources.displayMetrics.density).toInt()&#10;            submitButton.setPadding(pad, 0, pad, 0)&#10;            submitButton.minHeight = (48 * resources.displayMetrics.density).toInt()&#10;            // bring to front after layout pass&#10;            submitButton.post {&#10;                submitButton.bringToFront()&#10;                submitButton.invalidate()&#10;                actionButtonsContainer.invalidate()&#10;                // ensure elevation so it's above backgrounds/RecyclerView&#10;                val elev = 8 * resources.displayMetrics.density&#10;                try {&#10;                    submitButton.elevation = elev&#10;                    submitButton.translationZ = elev&#10;                    actionButtonsContainer.elevation = elev&#10;                    cancelButton.elevation = elev&#10;                } catch (_: Exception) { }&#10;            }&#10;        } catch (_: Exception) { /* defensive: if resource not found, ignore */ }&#10;        cancelButton.visibility = View.VISIBLE&#10;        cancelButton.isEnabled = true&#10;        // Defensive background for cancel as well&#10;        try { cancelButton.setBackgroundResource(R.drawable.button_outline) } catch (_: Exception) {}&#10;    }&#10;&#10;    // Return true if user has entered any data that would be lost if they exit&#10;    private fun hasUnsavedChanges(): Boolean {&#10;        if (quizTitleInput.text?.isNotEmpty() == true) return true&#10;        if (quizDescriptionInput.text?.isNotEmpty() == true) return true&#10;        if (questions.isNotEmpty()) return true&#10;        // Also check if any spinner selection differs from default (optional)&#10;        return false&#10;    }&#10;&#10;    private fun setupSpinners() {&#10;        // Category Spinner&#10;        val categories = QuizCategory.entries.map { it.displayName }&#10;        // Use custom spinner_item layout for the selected view (ensures padding + ellipsize)&#10;        val categoryAdapter = object : ArrayAdapter&lt;String&gt;(this, R.layout.spinner_selected_item, categories) {&#10;            override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;            override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;        }&#10;        categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;        categorySpinner.adapter = categoryAdapter&#10;        // Ensure selected view text is visible&#10;        ensureSpinnerSelectedTextBlack(categorySpinner)&#10;        // Force white popup background and refresh selection so selected view is rendered with our custom layout&#10;        categorySpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;        categorySpinner.setSelection(categorySpinner.selectedItemPosition)&#10;&#10;        // Difficulty Spinner&#10;        val difficulties = QuizDifficulty.entries.map { it.displayName }&#10;        val difficultyAdapter = object : ArrayAdapter&lt;String&gt;(this, R.layout.spinner_selected_item, difficulties) {&#10;            override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;            override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;        }&#10;        difficultyAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;        difficultySpinner.adapter = difficultyAdapter&#10;        ensureSpinnerSelectedTextBlack(difficultySpinner)&#10;        difficultySpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;        difficultySpinner.setSelection(difficultySpinner.selectedItemPosition)&#10;&#10;        // Course Spinner with proper text visibility&#10;        val courses = listOf(&#10;            &quot;PROG101 - Programming 101&quot;,&#10;            &quot;DS201 - Data Structures&quot;,&#10;            &quot;ALG301 - Algorithms&quot;,&#10;            &quot;DB401 - Database Systems&quot;,&#10;            &quot;WEB101 - Web Development&quot;,&#10;            &quot;MOB201 - Mobile Development&quot;,&#10;            &quot;SE301 - Software Engineering&quot;,&#10;            &quot;NET401 - Computer Networks&quot;&#10;        )&#10;        val courseAdapter = object : ArrayAdapter&lt;String&gt;(this, R.layout.spinner_selected_item, courses) {&#10;            override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;            override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;        }&#10;        courseAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;        courseSpinner.adapter = courseAdapter&#10;        ensureSpinnerSelectedTextBlack(courseSpinner)&#10;        courseSpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;        courseSpinner.setSelection(courseSpinner.selectedItemPosition)&#10;    }&#10;&#10;    // Force the selected (closed) Spinner text color to black. Use when adapter.getView may not affect the rendered selected view.&#10;    private fun ensureSpinnerSelectedTextBlack(spinner: Spinner) {&#10;        // preserve any existing listener by wrapping? For simplicity, set a light listener that only ensures color; it won't override more complex listeners used ailleurs.&#10;        spinner.post {&#10;            (spinner.selectedView as? TextView)?.setTextColor(android.graphics.Color.BLACK)&#10;        }&#10;        spinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {&#10;            override fun onItemSelected(parent: AdapterView&lt;*&gt;?, view: View?, position: Int, id: Long) {&#10;                (spinner.selectedView as? TextView)?.setTextColor(android.graphics.Color.BLACK)&#10;            }&#10;            override fun onNothingSelected(parent: AdapterView&lt;*&gt;?) {}&#10;        }&#10;    }&#10;    &#10;    private fun setupRecyclerView() {&#10;        // Pass a mutable list and provide both delete and edit handlers&#10;        questionAdapter = QuestionAdapter(questions as MutableList&lt;QuestionModel&gt;, onDelete = { position -&gt;&#10;            if (position in questions.indices) {&#10;                questions.removeAt(position)&#10;                questionAdapter.notifyItemRemoved(position)&#10;                // refresh following items so any index-related info is updated&#10;                if (position &lt; questions.size) questionAdapter.notifyItemRangeChanged(position, questions.size - position)&#10;            }&#10;        }, onEdit = { position -&gt;&#10;            if (position in questions.indices) showEditQuestionDialog(position)&#10;        })&#10;        questionsRecyclerView.layoutManager = LinearLayoutManager(this)&#10;        questionsRecyclerView.adapter = questionAdapter&#10;    }&#10;    &#10;    private fun setupClickListeners() {&#10;        addQuestionButton.setOnClickListener {&#10;            showAddQuestionDialog()&#10;        }&#10;        &#10;        submitButton.setOnClickListener {&#10;            saveQuiz()&#10;        }&#10;        &#10;        // Friendly confirmation on cancel: ask before discarding edits&#10;        cancelButton.setOnClickListener {&#10;            if (hasUnsavedChanges()) {&#10;                android.app.AlertDialog.Builder(this)&#10;                    .setTitle(getString(R.string.discard_changes_title))&#10;                    .setMessage(getString(R.string.discard_changes_message))&#10;                    .setPositiveButton(getString(R.string.discard)) { _, _ -&gt; finish() }&#10;                    .setNegativeButton(getString(R.string.cancel)) { dialog, _ -&gt; dialog.dismiss() }&#10;                    .show()&#10;            } else {&#10;                finish()&#10;            }&#10;        }&#10;        &#10;        backButton.setOnClickListener {&#10;            if (hasUnsavedChanges()) {&#10;                android.app.AlertDialog.Builder(this)&#10;                    .setTitle(getString(R.string.discard_changes_title))&#10;                    .setMessage(getString(R.string.discard_changes_message))&#10;                    .setPositiveButton(getString(R.string.discard)) { _, _ -&gt; finish() }&#10;                    .setNegativeButton(getString(R.string.cancel)) { dialog, _ -&gt; dialog.dismiss() }&#10;                    .show()&#10;            } else {&#10;                finish()&#10;            }&#10;        }&#10;    }&#10;    &#10;    @Suppress(&quot;DEPRECATION&quot;)&#10;    private fun showAddQuestionDialog() {&#10;        val builder = android.app.AlertDialog.Builder(this)&#10;        val view = layoutInflater.inflate(R.layout.dialog_add_question, null)&#10;&#10;        val questionTextInput = view.findViewById&lt;EditText&gt;(R.id.questionTextInput)&#10;        // Force text color on dialog input to avoid theme tint making text invisible&#10;        questionTextInput.setTextColor(android.graphics.Color.BLACK)&#10;        questionTextInput.setHintTextColor(getColor(R.color.text_secondary))&#10;         val questionTypeSpinner = view.findViewById&lt;Spinner&gt;(R.id.questionTypeSpinner)&#10;         val optionsContainer = view.findViewById&lt;LinearLayout&gt;(R.id.optionsContainer)&#10;         val correctAnswerSpinner = view.findViewById&lt;Spinner&gt;(R.id.correctAnswerSpinner)&#10;         val dialogCancelButton = view.findViewById&lt;Button&gt;(R.id.cancelButton)&#10;         val dialogAddButton = view.findViewById&lt;Button&gt;(R.id.addButton)&#10;&#10;        val typeAdapter = object : ArrayAdapter&lt;String&gt;(this, R.layout.spinner_selected_item, listOf(&quot;True/False&quot;, &quot;Multiple Choice&quot;)) {&#10;            override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;            override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;        }&#10;        typeAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;        questionTypeSpinner.adapter = typeAdapter&#10;        ensureSpinnerSelectedTextBlack(questionTypeSpinner)&#10;        questionTypeSpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;        questionTypeSpinner.setSelection(questionTypeSpinner.selectedItemPosition)&#10;&#10;        val optionInputs = mutableListOf&lt;EditText&gt;()&#10;        &#10;        questionTypeSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {&#10;            override fun onItemSelected(parent: AdapterView&lt;*&gt;?, view: View?, position: Int, id: Long) {&#10;                // Ensure selected text stays black when user picks a type&#10;                (questionTypeSpinner.selectedView as? TextView)?.setTextColor(android.graphics.Color.BLACK)&#10;                 optionsContainer.removeAllViews()&#10;                 optionInputs.clear()&#10;&#10;                if (position == 1) { // Multiple Choice&#10;                    repeat(4) { i -&gt;&#10;                        val optionInput = EditText(this@QuizCreationActivity).apply {&#10;                            hint = &quot;Option ${i + 1}&quot;&#10;                            textSize = 16f&#10;                            setPadding(16, 16, 16, 16)&#10;                            // Force black text so it's visible on white popup background&#10;                            setTextColor(android.graphics.Color.BLACK)&#10;                            // Keep hint color as secondary gray&#10;                            setHintTextColor(getColor(R.color.text_secondary))&#10;                            layoutParams = LinearLayout.LayoutParams(&#10;                                LinearLayout.LayoutParams.MATCH_PARENT,&#10;                                LinearLayout.LayoutParams.WRAP_CONTENT&#10;                            ).apply { setMargins(0, 8, 0, 8) }&#10;                        }&#10;                        // Appliquer un fond arrondi blanc uniforme&#10;                        optionInput.setBackgroundResource(R.drawable.input_rounded_background)&#10;                        optionsContainer.addView(optionInput)&#10;                        optionInputs.add(optionInput)&#10;                    }&#10;&#10;                    // Update correct answer spinner for multiple choice&#10;                    val answerOptions = listOf(&quot;Option 1&quot;, &quot;Option 2&quot;, &quot;Option 3&quot;, &quot;Option 4&quot;)&#10;                    val answerAdapter = object : ArrayAdapter&lt;String&gt;(this@QuizCreationActivity, R.layout.spinner_selected_item, answerOptions) {&#10;                        override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                            val view = super.getView(position, convertView, parent) as TextView&#10;                            view.setTextColor(android.graphics.Color.BLACK)&#10;                            view.setPadding(24, 16, 24, 16)&#10;                            return view&#10;                        }&#10;                        override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                            val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                            view.setTextColor(android.graphics.Color.BLACK)&#10;                            view.setPadding(24, 16, 24, 16)&#10;                            return view&#10;                        }&#10;                    }&#10;                    answerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;                    correctAnswerSpinner.adapter = answerAdapter&#10;                    ensureSpinnerSelectedTextBlack(correctAnswerSpinner)&#10;                    correctAnswerSpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;                    correctAnswerSpinner.setSelection(correctAnswerSpinner.selectedItemPosition)&#10;                 } else { // True/False&#10;                    val answerOptions = listOf(&quot;True&quot;, &quot;False&quot;)&#10;                    val answerAdapter = object : ArrayAdapter&lt;String&gt;(this@QuizCreationActivity, R.layout.spinner_selected_item, answerOptions) {&#10;                        override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                            val view = super.getView(position, convertView, parent) as TextView&#10;                            view.setTextColor(android.graphics.Color.BLACK)&#10;                            view.setPadding(24, 16, 24, 16)&#10;                            return view&#10;                        }&#10;                        override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                            val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                            view.setTextColor(android.graphics.Color.BLACK)&#10;                            view.setPadding(24, 16, 24, 16)&#10;                            return view&#10;                        }&#10;                    }&#10;                    answerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;                    correctAnswerSpinner.adapter = answerAdapter&#10;                    ensureSpinnerSelectedTextBlack(correctAnswerSpinner)&#10;                    correctAnswerSpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;                    correctAnswerSpinner.setSelection(correctAnswerSpinner.selectedItemPosition)&#10;                 }&#10;&#10;                 correctAnswerSpinner.isEnabled = true&#10;             }&#10;             override fun onNothingSelected(parent: AdapterView&lt;*&gt;?) {}&#10;         }&#10;&#10;        // Initialize with True/False options&#10;        val initAnswerOptions = listOf(&quot;True&quot;, &quot;False&quot;)&#10;        val initAnswerAdapter = object : ArrayAdapter&lt;String&gt;(this, R.layout.spinner_selected_item, initAnswerOptions) {&#10;            override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;            override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;        }&#10;        initAnswerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;        correctAnswerSpinner.adapter = initAnswerAdapter&#10;        ensureSpinnerSelectedTextBlack(correctAnswerSpinner)&#10;        correctAnswerSpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;        correctAnswerSpinner.setSelection(correctAnswerSpinner.selectedItemPosition)&#10;        correctAnswerSpinner.isEnabled = true&#10;        &#10;        // Hide underlying action buttons so they don't appear duplicated under the dialog&#10;        actionButtonsContainer.visibility = View.GONE&#10;        addQuestionButton.visibility = View.GONE&#10;&#10;         builder.setView(view)&#10;         val alert = builder.create()&#10;        // Ensure dialog resizes when keyboard appears so inputs are not obscured&#10;        alert.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)&#10;&#10;         alert.setOnDismissListener {&#10;             // restore underlying buttons visibility&#10;             actionButtonsContainer.visibility = View.VISIBLE&#10;             addQuestionButton.visibility = View.VISIBLE&#10;         }&#10;         alert.show()&#10;&#10;        // After the dialog is shown ensure the selected view text color is set (view may not be attached before show)&#10;        questionTypeSpinner.post { (questionTypeSpinner.selectedView as? TextView)?.setTextColor(android.graphics.Color.BLACK) }&#10;        correctAnswerSpinner.post { (correctAnswerSpinner.selectedView as? TextView)?.setTextColor(android.graphics.Color.BLACK) }&#10;&#10;        // Hook dialog internal buttons&#10;        dialogCancelButton.setOnClickListener {&#10;            alert.dismiss()&#10;        }&#10;&#10;        dialogAddButton.setOnClickListener {&#10;            val questionText = questionTextInput.text.toString()&#10;            if (questionText.isNotEmpty()) {&#10;                val type = if (questionTypeSpinner.selectedItemPosition == 0)&#10;                    QuestionType.TRUE_FALSE else QuestionType.MULTIPLE_CHOICE&#10;                &#10;                val options: List&lt;String&gt;&#10;                val correctAnswerIndex: String&#10;                &#10;                if (type == QuestionType.MULTIPLE_CHOICE) {&#10;                    options = optionInputs.map { it.text.toString() }.filter { it.isNotEmpty() }&#10;                    if (options.isEmpty()) {&#10;                        Toast.makeText(this, &quot;Please provide at least one option&quot;, Toast.LENGTH_SHORT).show()&#10;                        return@setOnClickListener&#10;                    }&#10;                    correctAnswerIndex = correctAnswerSpinner.selectedItemPosition.toString()&#10;                } else {&#10;                    options = listOf(&quot;True&quot;, &quot;False&quot;)&#10;                    correctAnswerIndex = if (correctAnswerSpinner.selectedItemPosition == 0) &quot;true&quot; else &quot;false&quot;&#10;                }&#10;                &#10;                val question = QuestionModel(&#10;                    id = System.currentTimeMillis().toString(),&#10;                    questionText = questionText,&#10;                    type = type,&#10;                    correctAnswer = correctAnswerIndex,&#10;                    options = options,&#10;                    timeLimit = 60,&#10;                    maxScore = 10&#10;                )&#10;                &#10;                questions.add(question)&#10;                questionAdapter.notifyItemInserted(questions.size - 1)&#10;                alert.dismiss()&#10;            } else {&#10;                Toast.makeText(this, &quot;Please enter question text&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;    &#10;    // Dialog to edit an existing question in-place&#10;    @Suppress(&quot;DEPRECATION&quot;)&#10;    private fun showEditQuestionDialog(position: Int) {&#10;        val existing = questions[position]&#10;        val builder = android.app.AlertDialog.Builder(this)&#10;        val view = layoutInflater.inflate(R.layout.dialog_add_question, null)&#10;&#10;        val questionTextInput = view.findViewById&lt;EditText&gt;(R.id.questionTextInput)&#10;        questionTextInput.setTextColor(android.graphics.Color.BLACK)&#10;        questionTextInput.setHintTextColor(getColor(R.color.text_secondary))&#10;        val questionTypeSpinner = view.findViewById&lt;Spinner&gt;(R.id.questionTypeSpinner)&#10;        val optionsContainer = view.findViewById&lt;LinearLayout&gt;(R.id.optionsContainer)&#10;        val correctAnswerSpinner = view.findViewById&lt;Spinner&gt;(R.id.correctAnswerSpinner)&#10;        val dialogCancelButton = view.findViewById&lt;Button&gt;(R.id.cancelButton)&#10;        val dialogAddButton = view.findViewById&lt;Button&gt;(R.id.addButton)&#10;&#10;        // Setup type spinner (same as add dialog)&#10;        val typeAdapter = object : ArrayAdapter&lt;String&gt;(this, R.layout.spinner_selected_item, listOf(&quot;True/False&quot;, &quot;Multiple Choice&quot;)) {&#10;            override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;            override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                view.setTextColor(android.graphics.Color.BLACK)&#10;                view.setPadding(24, 16, 24, 16)&#10;                return view&#10;            }&#10;        }&#10;        typeAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;        questionTypeSpinner.adapter = typeAdapter&#10;        ensureSpinnerSelectedTextBlack(questionTypeSpinner)&#10;        questionTypeSpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;&#10;        val optionInputs = mutableListOf&lt;EditText&gt;()&#10;&#10;        // Helper to build answer spinner for multiple choice&#10;        fun setupAnswerSpinnerForOptions(optionCount: Int) {&#10;            val answerOptions = (1..optionCount).map { &quot;Option $it&quot; }&#10;            val answerAdapter = object : ArrayAdapter&lt;String&gt;(this@QuizCreationActivity, R.layout.spinner_selected_item, answerOptions) {&#10;                override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                    val view = super.getView(position, convertView, parent) as TextView&#10;                    view.setTextColor(android.graphics.Color.BLACK)&#10;                    view.setPadding(24, 16, 24, 16)&#10;                    return view&#10;                }&#10;                override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                    val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                    view.setTextColor(android.graphics.Color.BLACK)&#10;                    view.setPadding(24, 16, 24, 16)&#10;                    return view&#10;                }&#10;            }&#10;            answerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;            correctAnswerSpinner.adapter = answerAdapter&#10;            ensureSpinnerSelectedTextBlack(correctAnswerSpinner)&#10;            correctAnswerSpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;        }&#10;&#10;        questionTypeSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {&#10;            override fun onItemSelected(parent: AdapterView&lt;*&gt;?, view: View?, pos: Int, id: Long) {&#10;                (questionTypeSpinner.selectedView as? TextView)?.setTextColor(android.graphics.Color.BLACK)&#10;                optionsContainer.removeAllViews()&#10;                optionInputs.clear()&#10;&#10;                if (pos == 1) { // Multiple Choice&#10;                    // Create four option inputs (or reuse count from existing question)&#10;                    val initialOptions = if (existing.options.isNotEmpty()) existing.options else List(4) { &quot;&quot; }&#10;                    val count = maxOf(4, initialOptions.size)&#10;                    repeat(count) { i -&gt;&#10;                        val optionInput = EditText(this@QuizCreationActivity).apply {&#10;                            hint = &quot;Option ${i + 1}&quot;&#10;                            textSize = 16f&#10;                            setPadding(16, 16, 16, 16)&#10;                            setTextColor(android.graphics.Color.BLACK)&#10;                            setHintTextColor(getColor(R.color.text_secondary))&#10;                            layoutParams = LinearLayout.LayoutParams(&#10;                                LinearLayout.LayoutParams.MATCH_PARENT,&#10;                                LinearLayout.LayoutParams.WRAP_CONTENT&#10;                            ).apply { setMargins(0, 8, 0, 8) }&#10;                        }&#10;                        optionInput.setBackgroundResource(R.drawable.input_rounded_background)&#10;                        optionInput.setText(if (i &lt; initialOptions.size) initialOptions[i] else &quot;&quot;)&#10;                        optionsContainer.addView(optionInput)&#10;                        optionInputs.add(optionInput)&#10;                    }&#10;                    setupAnswerSpinnerForOptions(optionInputs.size)&#10;                } else { // True/False&#10;                    val answerOptions = listOf(&quot;True&quot;, &quot;False&quot;)&#10;                    val answerAdapter = object : ArrayAdapter&lt;String&gt;(this@QuizCreationActivity, R.layout.spinner_selected_item, answerOptions) {&#10;                        override fun getView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                            val view = super.getView(position, convertView, parent) as TextView&#10;                            view.setTextColor(android.graphics.Color.BLACK)&#10;                            view.setPadding(24, 16, 24, 16)&#10;                            return view&#10;                        }&#10;                        override fun getDropDownView(position: Int, convertView: View?, parent: ViewGroup): View {&#10;                            val view = super.getDropDownView(position, convertView, parent) as TextView&#10;                            view.setTextColor(android.graphics.Color.BLACK)&#10;                            view.setPadding(24, 16, 24, 16)&#10;                            return view&#10;                        }&#10;                    }&#10;                    answerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)&#10;                    correctAnswerSpinner.adapter = answerAdapter&#10;                    ensureSpinnerSelectedTextBlack(correctAnswerSpinner)&#10;                    correctAnswerSpinner.setPopupBackgroundResource(R.drawable.spinner_dropdown_background)&#10;                }&#10;&#10;                correctAnswerSpinner.isEnabled = true&#10;            }&#10;            override fun onNothingSelected(parent: AdapterView&lt;*&gt;?) {}&#10;        }&#10;&#10;        // Prefill current values&#10;        questionTextInput.setText(existing.questionText)&#10;        questionTypeSpinner.post { questionTypeSpinner.setSelection(if (existing.type == QuestionType.MULTIPLE_CHOICE) 1 else 0) }&#10;&#10;        // Force initialization of answer spinner by triggering selection handler&#10;        questionTypeSpinner.post {&#10;            // After type spinner sets up options, preselect correct answer&#10;            if (existing.type == QuestionType.MULTIPLE_CHOICE) {&#10;                // find correct index if stored as numeric string&#10;                val correctIdx = existing.correctAnswer.toIntOrNull() ?: 0&#10;                correctAnswerSpinner.post { if (correctIdx in 0 until correctAnswerSpinner.count) correctAnswerSpinner.setSelection(correctIdx) }&#10;            } else {&#10;                val sel = if (existing.correctAnswer.equals(&quot;true&quot;, ignoreCase = true)) 0 else 1&#10;                correctAnswerSpinner.post { correctAnswerSpinner.setSelection(sel) }&#10;            }&#10;        }&#10;&#10;        // Hide underlying action buttons so they don't appear duplicated under the dialog&#10;        actionButtonsContainer.visibility = View.GONE&#10;        addQuestionButton.visibility = View.GONE&#10;&#10;        builder.setView(view)&#10;        val alert = builder.create()&#10;        alert.window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)&#10;&#10;        alert.setOnDismissListener {&#10;            actionButtonsContainer.visibility = View.VISIBLE&#10;            addQuestionButton.visibility = View.VISIBLE&#10;        }&#10;&#10;        alert.show()&#10;&#10;        // Ensure text colors for spinners inside dialog&#10;        questionTypeSpinner.post { (questionTypeSpinner.selectedView as? TextView)?.setTextColor(android.graphics.Color.BLACK) }&#10;        correctAnswerSpinner.post { (correctAnswerSpinner.selectedView as? TextView)?.setTextColor(android.graphics.Color.BLACK) }&#10;&#10;        dialogCancelButton.setOnClickListener { alert.dismiss() }&#10;&#10;        // Update button text to indicate edit&#10;        dialogAddButton.text = getString(R.string.update)&#10;        dialogAddButton.setOnClickListener {&#10;            val questionText = questionTextInput.text.toString()&#10;            if (questionText.isNotEmpty()) {&#10;                val type = if (questionTypeSpinner.selectedItemPosition == 0) QuestionType.TRUE_FALSE else QuestionType.MULTIPLE_CHOICE&#10;&#10;                val options: List&lt;String&gt;&#10;                val correctAnswerIndex: String&#10;&#10;                if (type == QuestionType.MULTIPLE_CHOICE) {&#10;                    val collected = optionInputs.map { it.text.toString() }.filter { it.isNotEmpty() }&#10;                    if (collected.isEmpty()) {&#10;                        Toast.makeText(this, &quot;Please provide at least one option&quot;, Toast.LENGTH_SHORT).show()&#10;                        return@setOnClickListener&#10;                    }&#10;                    options = collected&#10;                    correctAnswerIndex = correctAnswerSpinner.selectedItemPosition.toString()&#10;                } else {&#10;                    options = listOf(&quot;True&quot;, &quot;False&quot;)&#10;                    correctAnswerIndex = if (correctAnswerSpinner.selectedItemPosition == 0) &quot;true&quot; else &quot;false&quot;&#10;                }&#10;&#10;                val updated = existing.copy(&#10;                    questionText = questionText,&#10;                    type = type,&#10;                    correctAnswer = correctAnswerIndex,&#10;                    options = options&#10;                )&#10;&#10;                questions[position] = updated&#10;                questionAdapter.notifyItemChanged(position)&#10;                alert.dismiss()&#10;            } else {&#10;                Toast.makeText(this, &quot;Please enter question text&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveQuiz() {&#10;        val title = quizTitleInput.text.toString()&#10;        val description = quizDescriptionInput.text.toString()&#10;        val courseSelection = courseSpinner.selectedItem?.toString() ?: &quot;&quot;&#10;&#10;        if (title.isEmpty() || questions.isEmpty() || courseSelection.isEmpty()) {&#10;            Toast.makeText(this, &quot;Please fill all fields and add at least one question&quot;, Toast.LENGTH_SHORT).show()&#10;            return&#10;        }&#10;        &#10;        // Extract course ID from the selection (format: &quot;PROG101 - Programming 101&quot;)&#10;        val courseId = courseSelection.split(&quot; - &quot;).firstOrNull()?.trim() ?: &quot;UNKNOWN&quot;&#10;        val courseName = courseSelection.split(&quot; - &quot;).lastOrNull()?.trim() ?: courseSelection&#10;        &#10;        progressBar.visibility = ProgressBar.VISIBLE&#10;&#10;        lifecycleScope.launch {&#10;            try {&#10;                val category = QuizCategory.entries[categorySpinner.selectedItemPosition]&#10;                val difficulty = QuizDifficulty.entries[difficultySpinner.selectedItemPosition]&#10;&#10;                // Get current user from Flow (suspend) - first emission&#10;                val currentUser = sessionManager.currentUser.first()&#10;&#10;                val status = if (currentUser?.role == UserRole.PROFESSOR)&#10;                    ApprovalStatus.APPROVED else ApprovalStatus.PENDING&#10;                &#10;                // Prepare questions with proper order&#10;                val orderedQuestions = questions.mapIndexed { index, question -&gt;&#10;                    QuestionModel(&#10;                        id = question.id,&#10;                        questionText = question.questionText,&#10;                        type = question.type,&#10;                        correctAnswer = question.correctAnswer,&#10;                        options = question.options,&#10;                        timeLimit = question.timeLimit,&#10;                        maxScore = question.maxScore,&#10;                        order = index + 1,&#10;                        explanation = question.explanation&#10;                    )&#10;                }&#10;                &#10;                val quiz = QuizModel(&#10;                    id = System.currentTimeMillis().toString(),&#10;                    title = title,&#10;                    description = description,&#10;                    category = category,&#10;                    difficulty = difficulty,&#10;                    questions = orderedQuestions,&#10;                    creatorId = currentUser?.id ?: &quot;&quot;,&#10;                    creatorName = &quot;${currentUser?.firstName} ${currentUser?.lastName}&quot;,&#10;                    creatorRole = currentUser?.role ?: UserRole.STUDENT,&#10;                    linkedCourseId = courseId,&#10;                    linkedCourseName = courseName,&#10;                    approvalStatus = status&#10;                )&#10;                &#10;                val response = quizApiService.createQuiz(quiz)&#10;&#10;                progressBar.visibility = ProgressBar.GONE&#10;                &#10;                if" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_quiz_creation.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_quiz_creation.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/white&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;!-- Header --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/backButton&quot;&#10;                android:layout_width=&quot;40dp&quot;&#10;                android:layout_height=&quot;40dp&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:contentDescription=&quot;@string/back&quot;&#10;                android:src=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;@string/create_quiz&quot;&#10;                android:textSize=&quot;24sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/black&quot;&#10;                android:layout_marginStart=&quot;16dp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Quiz Title --&gt;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&#10;            app:boxBackgroundMode=&quot;outline&quot;&#10;            app:boxBackgroundColor=&quot;@color/input_background&quot;&#10;            app:boxStrokeColor=&quot;@color/green_500&quot;&#10;            app:boxStrokeWidth=&quot;1dp&quot;&#10;            app:boxCornerRadiusTopStart=&quot;8dp&quot;&#10;            app:boxCornerRadiusTopEnd=&quot;8dp&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/quizTitleInput&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;@string/quiz_title&quot;&#10;                android:inputType=&quot;text&quot;&#10;                android:textColor=&quot;@color/black&quot;&#10;                android:textColorHint=&quot;@color/text_secondary&quot;&#10;                android:padding=&quot;12dp&quot; /&gt;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;!-- Quiz Description --&gt;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&#10;            app:boxBackgroundMode=&quot;outline&quot;&#10;            app:boxBackgroundColor=&quot;@color/input_background&quot;&#10;            app:boxStrokeColor=&quot;@color/green_500&quot;&#10;            app:boxStrokeWidth=&quot;1dp&quot;&#10;            app:boxCornerRadiusTopStart=&quot;8dp&quot;&#10;            app:boxCornerRadiusTopEnd=&quot;8dp&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/quizDescriptionInput&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;@string/quiz_description&quot;&#10;                android:inputType=&quot;textMultiLine&quot;&#10;                android:minLines=&quot;3&quot;&#10;                android:textColor=&quot;@color/black&quot;&#10;                android:textColorHint=&quot;@color/text_secondary&quot;&#10;                android:padding=&quot;12dp&quot; /&gt;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;!-- Category Spinner --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/category&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textColor=&quot;@color/text_primary&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;Spinner&#10;            android:id=&quot;@+id/categorySpinner&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;56dp&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:paddingStart=&quot;12dp&quot;&#10;            android:paddingEnd=&quot;56dp&quot;&#10;            android:paddingTop=&quot;8dp&quot;&#10;            android:paddingBottom=&quot;8dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:clipToPadding=&quot;false&quot;&#10;            android:background=&quot;@drawable/input_border&quot;&#10;            android:popupBackground=&quot;@color/white&quot;&#10;            android:spinnerMode=&quot;dropdown&quot; /&gt;&#10;&#10;        &lt;!-- Difficulty Spinner --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/difficulty&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textColor=&quot;@color/text_primary&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;Spinner&#10;            android:id=&quot;@+id/difficultySpinner&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;56dp&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:paddingStart=&quot;12dp&quot;&#10;            android:paddingEnd=&quot;56dp&quot;&#10;            android:paddingTop=&quot;8dp&quot;&#10;            android:paddingBottom=&quot;8dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:clipToPadding=&quot;false&quot;&#10;            android:background=&quot;@drawable/input_border&quot;&#10;            android:popupBackground=&quot;@color/white&quot;&#10;            android:spinnerMode=&quot;dropdown&quot; /&gt;&#10;&#10;        &lt;!-- Course Selection --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/linked_course&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textColor=&quot;@color/text_primary&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;        &lt;Spinner&#10;            android:id=&quot;@+id/courseSpinner&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;56dp&quot;&#10;            android:layout_marginBottom=&quot;20dp&quot;&#10;            android:paddingStart=&quot;12dp&quot;&#10;            android:paddingEnd=&quot;56dp&quot;&#10;            android:paddingTop=&quot;8dp&quot;&#10;            android:paddingBottom=&quot;8dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:clipToPadding=&quot;false&quot;&#10;            android:background=&quot;@drawable/input_border&quot;&#10;            android:popupBackground=&quot;@color/white&quot;&#10;            android:spinnerMode=&quot;dropdown&quot; /&gt;&#10;&#10;        &lt;!-- Questions Section --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;@string/questions&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/black&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/addQuestionButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/add_question&quot;&#10;                android:background=&quot;@drawable/button_primary&quot;&#10;                android:textColor=&quot;@color/white&quot;&#10;                android:paddingHorizontal=&quot;16dp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Questions RecyclerView --&gt;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/questionsRecyclerView&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;300dp&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:background=&quot;@color/light_gray&quot;&#10;            android:clipToPadding=&quot;false&quot; /&gt;&#10;&#10;        &lt;!-- Action Buttons --&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/actionButtonsContainer&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:spacing=&quot;12dp&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/cancelButton&quot;&#10;                style=&quot;?android:attr/buttonBarButtonStyle&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;@string/cancel&quot;&#10;                android:background=&quot;@drawable/button_outline&quot;&#10;                android:textColor=&quot;@color/green_500&quot;&#10;                android:layout_marginEnd=&quot;6dp&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/submitButton&quot;&#10;                style=&quot;?android:attr/buttonBarButtonStyle&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;@string/submit_quiz&quot;&#10;                android:background=&quot;@drawable/button_primary&quot;&#10;                android:textColor=&quot;@color/white&quot;&#10;                android:layout_marginStart=&quot;6dp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Progress Bar --&gt;&#10;        &lt;ProgressBar&#10;            android:id=&quot;@+id/progressBar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&#10;    android:background=&quot;@color/white&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;12dp&quot;&gt;&#10;&#10;        &lt;!-- Header --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&gt;&#10;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/backButton&quot;&#10;                android:layout_width=&quot;36dp&quot;&#10;                android:layout_height=&quot;36dp&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:contentDescription=&quot;@string/back&quot;&#10;                android:src=&quot;@drawable/ic_launcher_foreground&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;@string/create_quiz&quot;&#10;                android:textSize=&quot;20sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/black&quot;&#10;                android:layout_marginStart=&quot;12dp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Quiz Title --&gt;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;10dp&quot;&#10;            app:boxBackgroundMode=&quot;outline&quot;&#10;            app:boxBackgroundColor=&quot;@color/input_background&quot;&#10;            app:boxStrokeColor=&quot;@color/green_500&quot;&#10;            app:boxStrokeWidth=&quot;1dp&quot;&#10;            app:boxCornerRadiusTopStart=&quot;8dp&quot;&#10;            app:boxCornerRadiusTopEnd=&quot;8dp&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/quizTitleInput&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;@string/quiz_title&quot;&#10;                android:inputType=&quot;text&quot;&#10;                android:textColor=&quot;@color/black&quot;&#10;                android:textColorHint=&quot;@color/text_secondary&quot;&#10;                android:padding=&quot;10dp&quot; /&gt;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;!-- Quiz Description --&gt;&#10;        &lt;com.google.android.material.textfield.TextInputLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;10dp&quot;&#10;            app:boxBackgroundMode=&quot;outline&quot;&#10;            app:boxBackgroundColor=&quot;@color/input_background&quot;&#10;            app:boxStrokeColor=&quot;@color/green_500&quot;&#10;            app:boxStrokeWidth=&quot;1dp&quot;&#10;            app:boxCornerRadiusTopStart=&quot;8dp&quot;&#10;            app:boxCornerRadiusTopEnd=&quot;8dp&quot;&gt;&#10;&#10;            &lt;com.google.android.material.textfield.TextInputEditText&#10;                android:id=&quot;@+id/quizDescriptionInput&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:hint=&quot;@string/quiz_description&quot;&#10;                android:inputType=&quot;textMultiLine&quot;&#10;                android:minLines=&quot;3&quot;&#10;                android:textColor=&quot;@color/black&quot;&#10;                android:textColorHint=&quot;@color/text_secondary&quot;&#10;                android:padding=&quot;10dp&quot; /&gt;&#10;        &lt;/com.google.android.material.textfield.TextInputLayout&gt;&#10;&#10;        &lt;!-- Category Spinner --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/category&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;15sp&quot;&#10;            android:textColor=&quot;@color/text_primary&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;        &lt;Spinner&#10;            android:id=&quot;@+id/categorySpinner&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&#10;            android:paddingStart=&quot;12dp&quot;&#10;            android:paddingEnd=&quot;56dp&quot;&#10;            android:paddingTop=&quot;6dp&quot;&#10;            android:paddingBottom=&quot;6dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:clipToPadding=&quot;false&quot;&#10;            android:background=&quot;@drawable/input_border&quot;&#10;            android:popupBackground=&quot;@color/white&quot;&#10;            android:spinnerMode=&quot;dropdown&quot; /&gt;&#10;&#10;        &lt;!-- Difficulty Spinner --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/difficulty&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;15sp&quot;&#10;            android:textColor=&quot;@color/text_primary&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;        &lt;Spinner&#10;            android:id=&quot;@+id/difficultySpinner&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&#10;            android:paddingStart=&quot;12dp&quot;&#10;            android:paddingEnd=&quot;56dp&quot;&#10;            android:paddingTop=&quot;6dp&quot;&#10;            android:paddingBottom=&quot;6dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:clipToPadding=&quot;false&quot;&#10;            android:background=&quot;@drawable/input_border&quot;&#10;            android:popupBackground=&quot;@color/white&quot;&#10;            android:spinnerMode=&quot;dropdown&quot; /&gt;&#10;&#10;        &lt;!-- Course Selection --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;@string/linked_course&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;15sp&quot;&#10;            android:textColor=&quot;@color/text_primary&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:layout_marginBottom=&quot;6dp&quot; /&gt;&#10;&#10;        &lt;Spinner&#10;            android:id=&quot;@+id/courseSpinner&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;48dp&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:paddingStart=&quot;12dp&quot;&#10;            android:paddingEnd=&quot;56dp&quot;&#10;            android:paddingTop=&quot;6dp&quot;&#10;            android:paddingBottom=&quot;6dp&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:clipToPadding=&quot;false&quot;&#10;            android:background=&quot;@drawable/input_border&quot;&#10;            android:popupBackground=&quot;@color/white&quot;&#10;            android:spinnerMode=&quot;dropdown&quot; /&gt;&#10;&#10;        &lt;!-- Questions Section --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:layout_marginTop=&quot;12dp&quot;&#10;            android:layout_marginBottom=&quot;10dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;@string/questions&quot;&#10;                android:textSize=&quot;17sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/black&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/addQuestionButton&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/add_question&quot;&#10;                android:background=&quot;@drawable/button_primary&quot;&#10;                android:textColor=&quot;@color/white&quot;&#10;                android:paddingHorizontal=&quot;12dp&quot;&#10;                android:minHeight=&quot;40dp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Questions RecyclerView --&gt;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/questionsRecyclerView&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;240dp&quot;&#10;            android:layout_marginBottom=&quot;12dp&quot;&#10;            android:background=&quot;@color/light_gray&quot;&#10;            android:clipToPadding=&quot;false&quot; /&gt;&#10;&#10;        &lt;!-- Action Buttons --&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/actionButtonsContainer&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:layout_marginTop=&quot;12dp&quot;&#10;            android:spacing=&quot;12dp&quot;&#10;            android:paddingBottom=&quot;12dp&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/cancelButton&quot;&#10;                style=&quot;?android:attr/buttonBarButtonStyle&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;44dp&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;@string/cancel&quot;&#10;                android:background=&quot;@drawable/button_outline&quot;&#10;                android:textColor=&quot;@color/green_500&quot;&#10;                android:layout_marginEnd=&quot;6dp&quot;&#10;                android:contentDescription=&quot;@string/cancel&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/submitButton&quot;&#10;                style=&quot;?android:attr/buttonBarButtonStyle&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;44dp&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;@string/submit_quiz&quot;&#10;                android:background=&quot;@drawable/button_primary&quot;&#10;                android:textColor=&quot;@color/white&quot;&#10;                android:layout_marginStart=&quot;6dp&quot;&#10;                android:contentDescription=&quot;@string/submit_quiz&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- Progress Bar --&gt;&#10;        &lt;ProgressBar&#10;            android:id=&quot;@+id/progressBar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;12dp&quot;&#10;            android:visibility=&quot;gone&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;QuizMaster&lt;/string&gt;&#10;    &#10;    &lt;!-- Authentication --&gt;&#10;    &lt;string name=&quot;login_title&quot;&gt;Welcome Back!&lt;/string&gt;&#10;    &lt;string name=&quot;register_title&quot;&gt;Join QuizMaster&lt;/string&gt;&#10;    &lt;string name=&quot;register_subtitle&quot;&gt;Create your account to start learning&lt;/string&gt;&#10;    &lt;string name=&quot;email_hint&quot;&gt;Email&lt;/string&gt;&#10;    &lt;string name=&quot;password_hint&quot;&gt;Password&lt;/string&gt;&#10;    &lt;string name=&quot;password&quot;&gt;Password&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_password&quot;&gt;Confirm Password&lt;/string&gt;&#10;    &lt;string name=&quot;username_hint&quot;&gt;Username&lt;/string&gt;&#10;    &lt;string name=&quot;first_name&quot;&gt;First Name&lt;/string&gt;&#10;    &lt;string name=&quot;last_name&quot;&gt;Last Name&lt;/string&gt;&#10;    &lt;string name=&quot;login_button&quot;&gt;Login&lt;/string&gt;&#10;    &lt;string name=&quot;register_button&quot;&gt;Register&lt;/string&gt;&#10;    &lt;string name=&quot;register&quot;&gt;Register&lt;/string&gt;&#10;    &lt;string name=&quot;no_account&quot;&gt;Don\'t have an account?&lt;/string&gt;&#10;    &lt;string name=&quot;already_have_account&quot;&gt;Already have an account?&lt;/string&gt;&#10;    &lt;string name=&quot;register_link&quot;&gt;Register&lt;/string&gt;&#10;    &lt;string name=&quot;login_link&quot;&gt;Login&lt;/string&gt;&#10;    &lt;string name=&quot;login_here&quot;&gt;Login here&lt;/string&gt;&#10;    &#10;    &lt;!-- User Roles --&gt;&#10;    &lt;string name=&quot;role_student&quot;&gt;Student&lt;/string&gt;&#10;    &lt;string name=&quot;role_professor&quot;&gt;Professor&lt;/string&gt;&#10;    &lt;string name=&quot;select_role&quot;&gt;Select your role&lt;/string&gt;&#10;    &#10;    &lt;!-- Dashboard --&gt;&#10;    &lt;string name=&quot;welcome_student&quot;&gt;Welcome back, %s!&lt;/string&gt;&#10;    &lt;string name=&quot;welcome_professor&quot;&gt;Hello, Professor %s!&lt;/string&gt;&#10;    &lt;string name=&quot;level_text&quot;&gt;Level %d&lt;/string&gt;&#10;    &lt;string name=&quot;xp_text&quot;&gt;%d XP&lt;/string&gt;&#10;    &lt;string name=&quot;xp_to_next_level&quot;&gt;%d XP to Level %d&lt;/string&gt;&#10;    &lt;string name=&quot;quizzes_completed&quot;&gt;Quizzes Completed: %d&lt;/string&gt;&#10;    &lt;string name=&quot;average_score&quot;&gt;Average Score: %.1f%%&lt;/string&gt;&#10;    &lt;string name=&quot;current_streak&quot;&gt;%d Day Streak &lt;/string&gt;&#10;    &#10;    &lt;!-- Quiz --&gt;&#10;    &lt;string name=&quot;quiz_question_counter&quot;&gt;Question %d of %d&lt;/string&gt;&#10;    &lt;string name=&quot;quiz_timer&quot;&gt;Time: %ds&lt;/string&gt;&#10;    &lt;string name=&quot;quiz_score&quot;&gt;Score: %d&lt;/string&gt;&#10;    &lt;string name=&quot;submit_quiz&quot;&gt;Submit Quiz&lt;/string&gt;&#10;    &lt;string name=&quot;next_question&quot;&gt;Next Question&lt;/string&gt;&#10;    &lt;string name=&quot;true_answer&quot;&gt;True&lt;/string&gt;&#10;    &lt;string name=&quot;false_answer&quot;&gt;False&lt;/string&gt;&#10;    &#10;    &lt;!-- Course Access --&gt;&#10;    &lt;string name=&quot;course_locked&quot;&gt; Complete %s to unlock&lt;/string&gt;&#10;    &lt;string name=&quot;course_completed&quot;&gt;✅ Course Completed&lt;/string&gt;&#10;    &lt;string name=&quot;quiz_available&quot;&gt;Available&lt;/string&gt;&#10;    &#10;    &lt;!-- Response Speed --&gt;&#10;    &lt;string name=&quot;response_fast&quot;&gt;⚡ Lightning Fast!&lt;/string&gt;&#10;    &lt;string name=&quot;response_medium&quot;&gt; Quick!&lt;/string&gt;&#10;    &lt;string name=&quot;response_slow&quot;&gt; Careful!&lt;/string&gt;&#10;    &lt;string name=&quot;response_too_slow&quot;&gt; Too Slow!&lt;/string&gt;&#10;    &#10;    &lt;!-- Performance --&gt;&#10;    &lt;string name=&quot;performance_excellent&quot;&gt; Excellent!&lt;/string&gt;&#10;    &lt;string name=&quot;performance_great&quot;&gt;⭐ Great Job!&lt;/string&gt;&#10;    &lt;string name=&quot;performance_good&quot;&gt; Good!&lt;/string&gt;&#10;    &lt;string name=&quot;performance_average&quot;&gt; Not Bad!&lt;/string&gt;&#10;    &lt;string name=&quot;performance_improve&quot;&gt; Keep Practicing!&lt;/string&gt;&#10;    &#10;    &lt;!-- Results --&gt;&#10;    &lt;string name=&quot;your_score&quot;&gt;Your Score&lt;/string&gt;&#10;    &lt;string name=&quot;percentage_score&quot;&gt;%.1f%%&lt;/string&gt;&#10;    &lt;string name=&quot;correct_answers&quot;&gt;%d / %d Correct&lt;/string&gt;&#10;    &lt;string name=&quot;total_time&quot;&gt;Total Time: %s&lt;/string&gt;&#10;    &lt;string name=&quot;average_time&quot;&gt;Avg Time: %.1fs per question&lt;/string&gt;&#10;    &lt;string name=&quot;xp_gained&quot;&gt;+%d XP Gained&lt;/string&gt;&#10;    &lt;string name=&quot;level_up&quot;&gt; Level Up! You\'re now Level %d!&lt;/string&gt;&#10;    &lt;string name=&quot;new_badge&quot;&gt; New Badge Unlocked: %s&lt;/string&gt;&#10;    &#10;    &lt;!-- Leaderboard --&gt;&#10;    &lt;string name=&quot;leaderboard_title&quot;&gt;Leaderboard&lt;/string&gt;&#10;    &lt;string name=&quot;leaderboard_subtitle&quot;&gt;See how you rank&lt;/string&gt;&#10;    &lt;string name=&quot;your_rank&quot;&gt;Your Rank: #%d&lt;/string&gt;&#10;    &lt;string name=&quot;better_than&quot;&gt;Better than %d students&lt;/string&gt;&#10;    &lt;string name=&quot;top_percentile&quot;&gt;Top %.1f%%&lt;/string&gt;&#10;    &lt;string name=&quot;global_rank&quot;&gt;Global Rank: #%d&lt;/string&gt;&#10;    &lt;string name=&quot;no_leaderboard_data&quot;&gt;No leaderboard data available&lt;/string&gt;&#10;    &#10;    &lt;!-- Quiz Creation --&gt;&#10;    &lt;string name=&quot;create_quiz&quot;&gt;Create Quiz&lt;/string&gt;&#10;    &lt;string name=&quot;quiz_title&quot;&gt;Quiz Title&lt;/string&gt;&#10;    &lt;string name=&quot;quiz_description&quot;&gt;Description (optional)&lt;/string&gt;&#10;    &lt;string name=&quot;select_category&quot;&gt;Select Category&lt;/string&gt;&#10;    &lt;string name=&quot;category&quot;&gt;Category&lt;/string&gt;&#10;    &lt;string name=&quot;select_difficulty&quot;&gt;Select Difficulty&lt;/string&gt;&#10;    &lt;string name=&quot;difficulty&quot;&gt;Difficulty&lt;/string&gt;&#10;    &lt;string name=&quot;select_course&quot;&gt;Select Linked Course&lt;/string&gt;&#10;    &lt;string name=&quot;linked_course&quot;&gt;Linked Course&lt;/string&gt;&#10;    &lt;string name=&quot;add_question&quot;&gt;Add Question&lt;/string&gt;&#10;    &lt;string name=&quot;questions&quot;&gt;Questions&lt;/string&gt;&#10;    &lt;string name=&quot;question_text&quot;&gt;Question Text&lt;/string&gt;&#10;    &lt;string name=&quot;question_type&quot;&gt;Question Type&lt;/string&gt;&#10;    &lt;string name=&quot;correct_answer&quot;&gt;Correct Answer&lt;/string&gt;&#10;    &lt;string name=&quot;add_option&quot;&gt;Add Option&lt;/string&gt;&#10;    &lt;string name=&quot;save_quiz&quot;&gt;Save Quiz&lt;/string&gt;&#10;    &lt;string name=&quot;submit_for_approval&quot;&gt;Submit for Approval&lt;/string&gt;&#10;    &#10;    &lt;!-- Professor --&gt;&#10;    &lt;string name=&quot;professor_dashboard_title&quot;&gt;Professor Dashboard&lt;/string&gt;&#10;    &lt;string name=&quot;pending_quizzes&quot;&gt;Pending Quizzes&lt;/string&gt;&#10;    &lt;string name=&quot;my_quizzes&quot;&gt;My Quizzes&lt;/string&gt;&#10;    &lt;string name=&quot;statistics&quot;&gt;Statistics&lt;/string&gt;&#10;    &lt;string name=&quot;pending_approvals&quot;&gt;Pending Approvals (%d)&lt;/string&gt;&#10;    &lt;string name=&quot;approve&quot;&gt;Approve&lt;/string&gt;&#10;    &lt;string name=&quot;reject&quot;&gt;Reject&lt;/string&gt;&#10;    &lt;string name=&quot;quiz_approved&quot;&gt;Quiz Approved!&lt;/string&gt;&#10;    &lt;string name=&quot;quiz_rejected&quot;&gt;Quiz Rejected&lt;/string&gt;&#10;    &lt;string name=&quot;created_by&quot;&gt;Created by: %s&lt;/string&gt;&#10;    &lt;string name=&quot;no_pending_quizzes&quot;&gt;No pending quizzes to review&lt;/string&gt;&#10;    &#10;    &lt;!-- Profile --&gt;&#10;    &lt;string name=&quot;user_name&quot;&gt;User Name&lt;/string&gt;&#10;    &lt;string name=&quot;email&quot;&gt;Email&lt;/string&gt;&#10;    &lt;string name=&quot;role&quot;&gt;Role&lt;/string&gt;&#10;    &lt;string name=&quot;badges&quot;&gt;Badges&lt;/string&gt;&#10;    &lt;string name=&quot;quiz_history&quot;&gt;Quiz History&lt;/string&gt;&#10;    &lt;string name=&quot;back&quot;&gt;Back&lt;/string&gt;&#10;    &#10;    &lt;!-- Badges --&gt;&#10;    &lt;string name=&quot;badge_first_quiz&quot;&gt; First Steps&lt;/string&gt;&#10;    &lt;string name=&quot;badge_speed_demon&quot;&gt;⚡ Speed Demon&lt;/string&gt;&#10;    &lt;string name=&quot;badge_perfect_score&quot;&gt; Perfect Score&lt;/string&gt;&#10;    &lt;string name=&quot;badge_streak_5&quot;&gt; 5-Day Streak&lt;/string&gt;&#10;    &lt;string name=&quot;badge_streak_10&quot;&gt; 10-Day Streak&lt;/string&gt;&#10;    &lt;string name=&quot;badge_quiz_master&quot;&gt; Quiz Master&lt;/string&gt;&#10;    &lt;string name=&quot;badge_category_expert&quot;&gt; Category Expert&lt;/string&gt;&#10;    &lt;string name=&quot;badge_level_10&quot;&gt; Level 10&lt;/string&gt;&#10;    &lt;string name=&quot;badge_level_25&quot;&gt; Level 25&lt;/string&gt;&#10;    &lt;string name=&quot;badge_level_50&quot;&gt; Level 50&lt;/string&gt;&#10;    &#10;    &lt;!-- General --&gt;&#10;    &lt;string name=&quot;loading&quot;&gt;Loading…&lt;/string&gt;&#10;    &lt;string name=&quot;error&quot;&gt;Error&lt;/string&gt;&#10;    &lt;string name=&quot;retry&quot;&gt;Retry&lt;/string&gt;&#10;    &lt;string name=&quot;cancel&quot;&gt;Cancel&lt;/string&gt;&#10;    &lt;string name=&quot;ok&quot;&gt;OK&lt;/string&gt;&#10;    &lt;string name=&quot;logout&quot;&gt;Logout&lt;/string&gt;&#10;    &lt;string name=&quot;profile&quot;&gt;Profile&lt;/string&gt;&#10;    &lt;string name=&quot;settings&quot;&gt;Settings&lt;/string&gt;&#10;    &lt;string name=&quot;history&quot;&gt;History&lt;/string&gt;&#10;&#10;    &lt;!-- Added for StudentDashboardActivity --&gt;&#10;    &lt;string name=&quot;full_name&quot;&gt;%1$s %2$s&lt;/string&gt;&#10;    &lt;string name=&quot;no_description&quot;&gt;No description&lt;/string&gt;&#10;    &lt;string name=&quot;failed_load_quizzes&quot;&gt;Failed to load quizzes&lt;/string&gt;&#10;    &lt;string name=&quot;error_with_message&quot;&gt;Error: %s&lt;/string&gt;&#10;&#10;    &lt;!-- Strings used by QuizCreationActivity (added) --&gt;&#10;    &lt;string name=&quot;update&quot;&gt;Update&lt;/string&gt;&#10;    &lt;string name=&quot;delete_question&quot;&gt;Delete question&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_delete_title&quot;&gt;Delete question?&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_delete_message&quot;&gt;Are you sure you want to delete this question? This action cannot be undone.&lt;/string&gt;&#10;    &lt;string name=&quot;delete&quot;&gt;Delete&lt;/string&gt;&#10;&lt;/resources&gt;&#10;" />
              <option name="updatedContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;QuizMaster&lt;/string&gt;&#10;    &#10;    &lt;!-- Authentication --&gt;&#10;    &lt;string name=&quot;login_title&quot;&gt;Welcome Back!&lt;/string&gt;&#10;    &lt;string name=&quot;register_title&quot;&gt;Join QuizMaster&lt;/string&gt;&#10;    &lt;string name=&quot;register_subtitle&quot;&gt;Create your account to start learning&lt;/string&gt;&#10;    &lt;string name=&quot;email_hint&quot;&gt;Email&lt;/string&gt;&#10;    &lt;string name=&quot;password_hint&quot;&gt;Password&lt;/string&gt;&#10;    &lt;string name=&quot;password&quot;&gt;Password&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_password&quot;&gt;Confirm Password&lt;/string&gt;&#10;    &lt;string name=&quot;username_hint&quot;&gt;Username&lt;/string&gt;&#10;    &lt;string name=&quot;first_name&quot;&gt;First Name&lt;/string&gt;&#10;    &lt;string name=&quot;last_name&quot;&gt;Last Name&lt;/string&gt;&#10;    &lt;string name=&quot;login_button&quot;&gt;Login&lt;/string&gt;&#10;    &lt;string name=&quot;register_button&quot;&gt;Register&lt;/string&gt;&#10;    &lt;string name=&quot;register&quot;&gt;Register&lt;/string&gt;&#10;    &lt;string name=&quot;no_account&quot;&gt;Don\'t have an account?&lt;/string&gt;&#10;    &lt;string name=&quot;already_have_account&quot;&gt;Already have an account?&lt;/string&gt;&#10;    &lt;string name=&quot;register_link&quot;&gt;Register&lt;/string&gt;&#10;    &lt;string name=&quot;login_link&quot;&gt;Login&lt;/string&gt;&#10;    &lt;string name=&quot;login_here&quot;&gt;Login here&lt;/string&gt;&#10;    &#10;    &lt;!-- User Roles --&gt;&#10;    &lt;string name=&quot;role_student&quot;&gt;Student&lt;/string&gt;&#10;    &lt;string name=&quot;role_professor&quot;&gt;Professor&lt;/string&gt;&#10;    &lt;string name=&quot;select_role&quot;&gt;Select your role&lt;/string&gt;&#10;    &#10;    &lt;!-- Dashboard --&gt;&#10;    &lt;string name=&quot;welcome_student&quot;&gt;Welcome back, %s!&lt;/string&gt;&#10;    &lt;string name=&quot;welcome_professor&quot;&gt;Hello, Professor %s!&lt;/string&gt;&#10;    &lt;string name=&quot;level_text&quot;&gt;Level %d&lt;/string&gt;&#10;    &lt;string name=&quot;xp_text&quot;&gt;%d XP&lt;/string&gt;&#10;    &lt;string name=&quot;xp_to_next_level&quot;&gt;%d XP to Level %d&lt;/string&gt;&#10;    &lt;string name=&quot;quizzes_completed&quot;&gt;Quizzes Completed: %d&lt;/string&gt;&#10;    &lt;string name=&quot;average_score&quot;&gt;Average Score: %.1f%%&lt;/string&gt;&#10;    &lt;string name=&quot;current_streak&quot;&gt;%d Day Streak &lt;/string&gt;&#10;    &#10;    &lt;!-- Quiz --&gt;&#10;    &lt;string name=&quot;quiz_question_counter&quot;&gt;Question %d of %d&lt;/string&gt;&#10;    &lt;string name=&quot;quiz_timer&quot;&gt;Time: %ds&lt;/string&gt;&#10;    &lt;string name=&quot;quiz_score&quot;&gt;Score: %d&lt;/string&gt;&#10;    &lt;string name=&quot;submit_quiz&quot;&gt;Submit Quiz&lt;/string&gt;&#10;    &lt;string name=&quot;next_question&quot;&gt;Next Question&lt;/string&gt;&#10;    &lt;string name=&quot;true_answer&quot;&gt;True&lt;/string&gt;&#10;    &lt;string name=&quot;false_answer&quot;&gt;False&lt;/string&gt;&#10;    &#10;    &lt;!-- Course Access --&gt;&#10;    &lt;string name=&quot;course_locked&quot;&gt; Complete %s to unlock&lt;/string&gt;&#10;    &lt;string name=&quot;course_completed&quot;&gt;✅ Course Completed&lt;/string&gt;&#10;    &lt;string name=&quot;quiz_available&quot;&gt;Available&lt;/string&gt;&#10;    &#10;    &lt;!-- Response Speed --&gt;&#10;    &lt;string name=&quot;response_fast&quot;&gt;⚡ Lightning Fast!&lt;/string&gt;&#10;    &lt;string name=&quot;response_medium&quot;&gt; Quick!&lt;/string&gt;&#10;    &lt;string name=&quot;response_slow&quot;&gt; Careful!&lt;/string&gt;&#10;    &lt;string name=&quot;response_too_slow&quot;&gt; Too Slow!&lt;/string&gt;&#10;    &#10;    &lt;!-- Performance --&gt;&#10;    &lt;string name=&quot;performance_excellent&quot;&gt; Excellent!&lt;/string&gt;&#10;    &lt;string name=&quot;performance_great&quot;&gt;⭐ Great Job!&lt;/string&gt;&#10;    &lt;string name=&quot;performance_good&quot;&gt; Good!&lt;/string&gt;&#10;    &lt;string name=&quot;performance_average&quot;&gt; Not Bad!&lt;/string&gt;&#10;    &lt;string name=&quot;performance_improve&quot;&gt; Keep Practicing!&lt;/string&gt;&#10;    &#10;    &lt;!-- Results --&gt;&#10;    &lt;string name=&quot;your_score&quot;&gt;Your Score&lt;/string&gt;&#10;    &lt;string name=&quot;percentage_score&quot;&gt;%.1f%%&lt;/string&gt;&#10;    &lt;string name=&quot;correct_answers&quot;&gt;%d / %d Correct&lt;/string&gt;&#10;    &lt;string name=&quot;total_time&quot;&gt;Total Time: %s&lt;/string&gt;&#10;    &lt;string name=&quot;average_time&quot;&gt;Avg Time: %.1fs per question&lt;/string&gt;&#10;    &lt;string name=&quot;xp_gained&quot;&gt;+%d XP Gained&lt;/string&gt;&#10;    &lt;string name=&quot;level_up&quot;&gt; Level Up! You\'re now Level %d!&lt;/string&gt;&#10;    &lt;string name=&quot;new_badge&quot;&gt; New Badge Unlocked: %s&lt;/string&gt;&#10;    &#10;    &lt;!-- Leaderboard --&gt;&#10;    &lt;string name=&quot;leaderboard_title&quot;&gt;Leaderboard&lt;/string&gt;&#10;    &lt;string name=&quot;leaderboard_subtitle&quot;&gt;See how you rank&lt;/string&gt;&#10;    &lt;string name=&quot;your_rank&quot;&gt;Your Rank: #%d&lt;/string&gt;&#10;    &lt;string name=&quot;better_than&quot;&gt;Better than %d students&lt;/string&gt;&#10;    &lt;string name=&quot;top_percentile&quot;&gt;Top %.1f%%&lt;/string&gt;&#10;    &lt;string name=&quot;global_rank&quot;&gt;Global Rank: #%d&lt;/string&gt;&#10;    &lt;string name=&quot;no_leaderboard_data&quot;&gt;No leaderboard data available&lt;/string&gt;&#10;    &#10;    &lt;!-- Quiz Creation --&gt;&#10;    &lt;string name=&quot;create_quiz&quot;&gt;Create Quiz&lt;/string&gt;&#10;    &lt;string name=&quot;quiz_title&quot;&gt;Quiz Title&lt;/string&gt;&#10;    &lt;string name=&quot;quiz_description&quot;&gt;Description (optional)&lt;/string&gt;&#10;    &lt;string name=&quot;select_category&quot;&gt;Select Category&lt;/string&gt;&#10;    &lt;string name=&quot;category&quot;&gt;Category&lt;/string&gt;&#10;    &lt;string name=&quot;select_difficulty&quot;&gt;Select Difficulty&lt;/string&gt;&#10;    &lt;string name=&quot;difficulty&quot;&gt;Difficulty&lt;/string&gt;&#10;    &lt;string name=&quot;select_course&quot;&gt;Select Linked Course&lt;/string&gt;&#10;    &lt;string name=&quot;linked_course&quot;&gt;Linked Course&lt;/string&gt;&#10;    &lt;string name=&quot;add_question&quot;&gt;Add Question&lt;/string&gt;&#10;    &lt;string name=&quot;questions&quot;&gt;Questions&lt;/string&gt;&#10;    &lt;string name=&quot;question_text&quot;&gt;Question Text&lt;/string&gt;&#10;    &lt;string name=&quot;question_type&quot;&gt;Question Type&lt;/string&gt;&#10;    &lt;string name=&quot;correct_answer&quot;&gt;Correct Answer&lt;/string&gt;&#10;    &lt;string name=&quot;add_option&quot;&gt;Add Option&lt;/string&gt;&#10;    &lt;string name=&quot;save_quiz&quot;&gt;Save Quiz&lt;/string&gt;&#10;    &lt;string name=&quot;submit_for_approval&quot;&gt;Submit for Approval&lt;/string&gt;&#10;    &#10;    &lt;!-- Professor --&gt;&#10;    &lt;string name=&quot;professor_dashboard_title&quot;&gt;Professor Dashboard&lt;/string&gt;&#10;    &lt;string name=&quot;pending_quizzes&quot;&gt;Pending Quizzes&lt;/string&gt;&#10;    &lt;string name=&quot;my_quizzes&quot;&gt;My Quizzes&lt;/string&gt;&#10;    &lt;string name=&quot;statistics&quot;&gt;Statistics&lt;/string&gt;&#10;    &lt;string name=&quot;pending_approvals&quot;&gt;Pending Approvals (%d)&lt;/string&gt;&#10;    &lt;string name=&quot;approve&quot;&gt;Approve&lt;/string&gt;&#10;    &lt;string name=&quot;reject&quot;&gt;Reject&lt;/string&gt;&#10;    &lt;string name=&quot;quiz_approved&quot;&gt;Quiz Approved!&lt;/string&gt;&#10;    &lt;string name=&quot;quiz_rejected&quot;&gt;Quiz Rejected&lt;/string&gt;&#10;    &lt;string name=&quot;created_by&quot;&gt;Created by: %s&lt;/string&gt;&#10;    &lt;string name=&quot;no_pending_quizzes&quot;&gt;No pending quizzes to review&lt;/string&gt;&#10;    &#10;    &lt;!-- Profile --&gt;&#10;    &lt;string name=&quot;user_name&quot;&gt;User Name&lt;/string&gt;&#10;    &lt;string name=&quot;email&quot;&gt;Email&lt;/string&gt;&#10;    &lt;string name=&quot;role&quot;&gt;Role&lt;/string&gt;&#10;    &lt;string name=&quot;badges&quot;&gt;Badges&lt;/string&gt;&#10;    &lt;string name=&quot;quiz_history&quot;&gt;Quiz History&lt;/string&gt;&#10;    &lt;string name=&quot;back&quot;&gt;Back&lt;/string&gt;&#10;    &#10;    &lt;!-- Badges --&gt;&#10;    &lt;string name=&quot;badge_first_quiz&quot;&gt; First Steps&lt;/string&gt;&#10;    &lt;string name=&quot;badge_speed_demon&quot;&gt;⚡ Speed Demon&lt;/string&gt;&#10;    &lt;string name=&quot;badge_perfect_score&quot;&gt; Perfect Score&lt;/string&gt;&#10;    &lt;string name=&quot;badge_streak_5&quot;&gt; 5-Day Streak&lt;/string&gt;&#10;    &lt;string name=&quot;badge_streak_10&quot;&gt; 10-Day Streak&lt;/string&gt;&#10;    &lt;string name=&quot;badge_quiz_master&quot;&gt; Quiz Master&lt;/string&gt;&#10;    &lt;string name=&quot;badge_category_expert&quot;&gt; Category Expert&lt;/string&gt;&#10;    &lt;string name=&quot;badge_level_10&quot;&gt; Level 10&lt;/string&gt;&#10;    &lt;string name=&quot;badge_level_25&quot;&gt; Level 25&lt;/string&gt;&#10;    &lt;string name=&quot;badge_level_50&quot;&gt; Level 50&lt;/string&gt;&#10;    &#10;    &lt;!-- General --&gt;&#10;    &lt;string name=&quot;loading&quot;&gt;Loading…&lt;/string&gt;&#10;    &lt;string name=&quot;error&quot;&gt;Error&lt;/string&gt;&#10;    &lt;string name=&quot;retry&quot;&gt;Retry&lt;/string&gt;&#10;    &lt;string name=&quot;cancel&quot;&gt;Cancel&lt;/string&gt;&#10;    &lt;string name=&quot;ok&quot;&gt;OK&lt;/string&gt;&#10;    &lt;string name=&quot;logout&quot;&gt;Logout&lt;/string&gt;&#10;    &lt;string name=&quot;profile&quot;&gt;Profile&lt;/string&gt;&#10;    &lt;string name=&quot;settings&quot;&gt;Settings&lt;/string&gt;&#10;    &lt;string name=&quot;history&quot;&gt;History&lt;/string&gt;&#10;&#10;    &lt;!-- Added for StudentDashboardActivity --&gt;&#10;    &lt;string name=&quot;full_name&quot;&gt;%1$s %2$s&lt;/string&gt;&#10;    &lt;string name=&quot;no_description&quot;&gt;No description&lt;/string&gt;&#10;    &lt;string name=&quot;failed_load_quizzes&quot;&gt;Failed to load quizzes&lt;/string&gt;&#10;    &lt;string name=&quot;error_with_message&quot;&gt;Error: %s&lt;/string&gt;&#10;&#10;    &lt;!-- Strings used by QuizCreationActivity (added) --&gt;&#10;    &lt;string name=&quot;update&quot;&gt;Update&lt;/string&gt;&#10;    &lt;string name=&quot;delete_question&quot;&gt;Delete question&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_delete_title&quot;&gt;Delete question?&lt;/string&gt;&#10;    &lt;string name=&quot;confirm_delete_message&quot;&gt;Are you sure you want to delete this question? This action cannot be undone.&lt;/string&gt;&#10;    &lt;string name=&quot;delete&quot;&gt;Delete&lt;/string&gt;&#10;    &lt;!-- Shorter submit text for compact UI --&gt;&#10;    &lt;string name=&quot;submit_short&quot;&gt;Submit&lt;/string&gt;&#10;    &#10;    &lt;!-- Cancel / discard confirmation in QuizCreationActivity --&gt;&#10;    &lt;string name=&quot;discard_changes_title&quot;&gt;Discard changes?&lt;/string&gt;&#10;    &lt;string name=&quot;discard_changes_message&quot;&gt;Are you sure you want to discard this quiz? Your current changes will be lost.&lt;/string&gt;&#10;    &lt;string name=&quot;discard&quot;&gt;Discard&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>